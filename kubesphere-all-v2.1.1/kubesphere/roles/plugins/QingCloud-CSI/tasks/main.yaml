---

- name: QCloud-CSI | Getting QCloud-CSI installation files
  copy:
    src: "qingcloud-csi"
    dest: "{{ kube_config_dir }}/addons/"

- name: QCloud-CSI | Check old csi-qingcloud
  shell: >
    {{ bin_dir }}/kubectl get pod -n kube-system -l  app=csi-qingcloud,csi=v0.2.1 | grep csi-qingcloud | wc -l
  register: old_csi_qingcloud_num

- name: QCloud-CSI | Set old Csi DriverName
  set_fact:
    oldCsiDriverName: "csi-qingcloud"
  when:
    - old_csi_qingcloud_num.stdout != "0"

- name: QCloud-CSI | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/qingcloud-csi/{{ item.file }}"
  with_items:
    - { name: config, file: config.yaml, type: config }
    - { name: sc, file: sc.yaml, type: sc }
    - { name: qingcloud-csi-disk-v3, file: qingcloud-csi-disk-v1.1.0-rc.3.yaml, type: workload }
   # - { name: csi-controller-sts, file: csi-controller-sts.yaml, type: sts }
   # - { name: csi-node-ds, file: csi-node-ds.yaml, type: ds }

- name: QCloud-CSI | Delete old csi-qingcloud
  shell: >
    {{ bin_dir }}/kubectl -n kube-system delete sts csi-qingcloud-controller &&
    {{ bin_dir }}/kubectl -n kube-system delete ds csi-qingcloud-node
  when:
    - old_csi_qingcloud_num.stdout != "0"

- name: QCloud-CSI | Creating Configmap
  command: "{{ bin_dir }}/kubectl create configmap csi-qingcloud --from-file=config.yaml={{ kube_config_dir }}/addons/qingcloud-csi/config.yaml --namespace=kube-system"
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: QCloud-CSI | Creating StorageClass
  command: >
    {{ bin_dir }}/kubectl apply -f {{ kube_config_dir }}/addons/qingcloud-csi/sc.yaml --force
  register: import 
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"

- name: QCloud-CSI | Creating qingcloud-csi-disk
  command: >
    {{ bin_dir }}/kubectl apply -f {{ kube_config_dir }}/addons/qingcloud-csi/qingcloud-csi-disk-v1.1.0-rc.3.yaml
  register: import 
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr and 'Warning' not in import.stderr"

- name: check csi is ok
  shell: >
    {{ bin_dir }}/kubectl get pod -n kube-system | grep csi-qingcloud-controller | awk '{print $3}'
  register: csi_check
  until: csi_check.stdout.find("Running") != -1
  retries: 20
  delay: 10
  ignore_errors: yes

- name: csi failed and how to solve
  fail:
     msg: "Please follow the steps below \n kubectl describe pod -n kube-system `kubectl get pod -n kube-system |grep csi-qingcloud-controller|awk '{print $1}'` "
  when:
    - csi_check.stdout.find("Running") == -1
