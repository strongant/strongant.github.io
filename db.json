{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/Java递归调用示意图.png","path":"images/Java递归调用示意图.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/yilia/source/favicon-16x16.png","path":"favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/yilia/source/favicon-96x96.png","path":"favicon-96x96.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/favicon-32x32.png","path":"favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"source/images/login-changyan.png","path":"images/login-changyan.png","modified":0,"renderable":0},{"_id":"source/images/copy-config.png","path":"images/copy-config.png","modified":0,"renderable":0},{"_id":"source/images/reg_changyan.png","path":"images/reg_changyan.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/wechatpay.jpg","path":"img/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1500600835000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1500600835000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1500600835000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1500600835000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1500600835000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1500600835000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1500600835000},{"_id":"themes/yilia/_config.yml","hash":"e1c398896a09e15f61fef9cf262889cdf634ca81","modified":1501921807000},{"_id":"themes/yilia/package.json","hash":"946b26ae0dff42c590068f0a58ecd326ed059b68","modified":1500600836000},{"_id":"themes/yilia/webpack.config.js","hash":"c4dca5c60822c90359e48fad373be768ae9fb43d","modified":1500600836000},{"_id":"source/_posts/IDEA-Mac下快捷键奇淫技巧.md","hash":"1f760e61197e8b64fa441d06278c7b4b805405d8","modified":1500954912000},{"_id":"source/_posts/2017开工快乐.md","hash":"25dd8816ab8244d04ebca74230d718b1196567ed","modified":1500600835000},{"_id":"source/_posts/SpringBoot学习一.md","hash":"d9937471c22a581fa25326975e054303eec5b4b4","modified":1500600835000},{"_id":"source/_posts/Java面试-一.md","hash":"19bae14dc1985e4ad5657a1064cfb8f7bc93c397","modified":1500600835000},{"_id":"source/_posts/hexo将多说替换为畅言.md","hash":"4b0f00ece339be6731f89c09dc486988ee759c83","modified":1500600835000},{"_id":"source/_posts/hexo搭建成功.md","hash":"ec7f2e44648ed6b92ebf41d785f27cc73882c321","modified":1500600835000},{"_id":"source/_posts/rxjs翻译-rxjs介绍.md","hash":"4ff6072128d1ea0a1e77b18da7855f743b92424b","modified":1500600835000},{"_id":"source/_posts/使用springdata操作es出错org-elasticsearch-client-transport-NoNodeAvailableException.md","hash":"af37fb31f5a7c6fa2fdea2a7797a4dbe4586a6ee","modified":1500602073000},{"_id":"source/_posts/修正browser-sync公众号文章的错误.md","hash":"84f1aa68d807173d6e4ec29640f31e1efe616550","modified":1500600835000},{"_id":"source/_posts/春节回家.md","hash":"171dad8aa6b995fbde77af6eaf20643c1d8c75a5","modified":1500600835000},{"_id":"source/_posts/递归原理解析.md","hash":"67899d4db7e369639a2fb9035848a6a28070ca49","modified":1500600835000},{"_id":"source/images/Java递归调用示意图.png","hash":"98919512140ca79b8b894e0ca7568db01d9ef5e1","modified":1500600835000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1500600835000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1500600835000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1500600835000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1500600835000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1500600835000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1500600835000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1500600835000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1500600836000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1500600836000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1500600836000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1500600836000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500600836000},{"_id":"themes/yilia/source/CNAME","hash":"057d08557902f487a8694c7b2a1e2f1978e0231d","modified":1500600836000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500600836000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1500600836000},{"_id":"themes/yilia/source/favicon-16x16.png","hash":"d9e2a10b5825481495dbaf0d08ee4c3309d88064","modified":1500600836000},{"_id":"themes/yilia/source/favicon.ico","hash":"ebd7a5c235dfda4ce3a9e0531138eb7e3f9c7585","modified":1500600836000},{"_id":"themes/yilia/source/favicon-96x96.png","hash":"fbb90182a6062decabb297a7ffd658c8422afffa","modified":1500600836000},{"_id":"themes/yilia/source/favicon-32x32.png","hash":"be0a23aaca22a8cf930268cb40f1587c3a6a48e6","modified":1500600836000},{"_id":"themes/yilia/source/main.2d7529.css","hash":"46e6fe0ae7d7fec15506cc799cf05878732b26cc","modified":1500953724000},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1500600836000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1500600836000},{"_id":"themes/yilia/source/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1500600836000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1500600836000},{"_id":"source/images/login-changyan.png","hash":"e1416a8df281de9892f08ffcbdbc9800e43fa515","modified":1500600835000},{"_id":"source/images/copy-config.png","hash":"b7edc9d7a15b3c1ba29f00391f75493d75786538","modified":1500600835000},{"_id":"source/images/reg_changyan.png","hash":"968b9485eb99e2eec10d46713bc61dbdcc0f3b01","modified":1500600835000},{"_id":"themes/yilia/source/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1500600836000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"12d7b852c3f0403b8e71463c6fa1c0a6dc142e4d","modified":1500954607000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"7ce870bc0e14f02f4128a4b9201e585fbeffa60e","modified":1500949329000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"232e480a5a237a3b3629ae77592987180b9a0d9a","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1500600836000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1500600836000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1500600836000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1500600836000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1500600836000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1500600836000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1500600836000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1500600836000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1500600836000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1500600836000},{"_id":"themes/yilia/source/img/alipay.jpg","hash":"d689f087343d7bc90d68ef4d376fd8336da9700f","modified":1500735393000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1500600836000},{"_id":"themes/yilia/source/img/wechatpay.jpg","hash":"7d2e576c951caa4aeb406b333f667dae85c95756","modified":1500735410000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1500600836000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1500600836000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1500600836000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1500600836000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1500600836000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1500600836000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1500600836000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1500600836000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"5e3feefbbba70d8da0ec2c75db41762dd4762a81","modified":1500600836000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"d9c1a22a561dc6072833a2f049b3639c0007283d","modified":1500600836000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1500600836000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1500600836000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1500600836000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1500600836000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1500600836000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1500600836000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1500600836000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1500600836000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1500600836000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1500600836000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1500600836000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1500600836000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1500600836000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1500600836000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1500600836000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1500600836000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1500600836000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1500600836000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1500600836000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1500600836000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1500600836000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1500600836000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1500600836000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1500600836000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1500600836000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1500600836000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1500600836000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1500600836000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"9c1e9e532a12df62834ac623295d1a73e7072278","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.bak.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1500600835000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1500600836000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1500600835000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1500600836000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1500600836000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1500600836000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1500600836000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1500600836000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1500600836000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1500600836000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1500600836000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1500600836000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1500600836000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1500600836000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1500600836000},{"_id":"public/atom.xml","hash":"913cadc7fe64546b1b4fcca0d37512ffd9ed2b79","modified":1500732049062},{"_id":"public/baidusitemap.xml","hash":"52e8f9c05d2d0b567981ea4756ca3a467a91f0ee","modified":1500732049266},{"_id":"public/content.json","hash":"d5708f7c565d1fcc9f023f828d167a9927f73d03","modified":1500732049281},{"_id":"public/search.xml","hash":"4c6e3467348e8eb2ae0a4bd928a4ec54ff6c6094","modified":1500732049281},{"_id":"public/sitemap.xml","hash":"abb96fc1e3e4af2e258b2c32133bec552592c254","modified":1500732049281},{"_id":"public/2017/07/22/IDEA-Mac下快捷键奇淫技巧/index.html","hash":"c0cbd108cb865344b96fb763a0d13a81d51056c5","modified":1500732049293},{"_id":"public/2017/07/21/使用springdata操作es出错org-elasticsearch-client-transport-NoNodeAvailableException/index.html","hash":"32bf70d5b01be10f7b3da012b9743fd5f2497d78","modified":1500732049293},{"_id":"public/2017/05/30/hexo将多说替换为畅言/index.html","hash":"691e2fa8c06c1f939ebea522f5bddd911a007103","modified":1500732049293},{"_id":"public/2017/05/29/递归原理解析/index.html","hash":"25a2f9393efb76d329df710d51adf4ff93430765","modified":1500732049293},{"_id":"public/2017/03/12/SpringBoot学习一/index.html","hash":"bdc605ac60e17cffed7438d5f6a7ac936d9d29e7","modified":1500732049293},{"_id":"public/2017/03/05/Java面试-一/index.html","hash":"4db4094ab5e9c21ffacc9b14df29d9b8f30c5814","modified":1500732049294},{"_id":"public/2017/02/05/2017开工快乐/index.html","hash":"1c72b80b2d87ea22912ba09118929bdeae9490ea","modified":1500732049294},{"_id":"public/2017/01/23/春节回家/index.html","hash":"ddbb116dd2c9b2889ac81d242a9516f8afaa7cde","modified":1500732049294},{"_id":"public/2017/01/22/rxjs翻译-rxjs介绍/index.html","hash":"cc927bec25414e1faa266cd388b99146ddea9ed9","modified":1500732049294},{"_id":"public/2017/01/21/修正browser-sync公众号文章的错误/index.html","hash":"1e1c69f99fb1e137c5f600ffe872b85f4115c63c","modified":1500732049294},{"_id":"public/2017/01/19/hexo搭建成功/index.html","hash":"d8b17c8ba33bb6fba5aa289531545eb56fccc1ce","modified":1500732049294},{"_id":"public/archives/index.html","hash":"20fbcbe4718d10d2b6090e6844f32c4170eab0a8","modified":1500732049294},{"_id":"public/archives/page/2/index.html","hash":"5acb432a4ca9757a7041ccc50f9ec03655fd2d60","modified":1500732049295},{"_id":"public/archives/2017/index.html","hash":"e0ec3a21bccf2d7dcab8655ea1efadc16a5f9765","modified":1500732049295},{"_id":"public/archives/2017/page/2/index.html","hash":"01518a4f2fcd3c5b5ee06637fb149bcd04aba0d4","modified":1500732049295},{"_id":"public/archives/2017/01/index.html","hash":"17031b7d21623eba8898604aaee6226ff324cbf3","modified":1500732049295},{"_id":"public/archives/2017/02/index.html","hash":"adc2fdfe3e83079400e2404973322859f07e60b8","modified":1500732049296},{"_id":"public/archives/2017/03/index.html","hash":"c3d6f6291076dedf56b29ada4b87fb1be7901176","modified":1500732049296},{"_id":"public/archives/2017/05/index.html","hash":"c57eb97a646e94c99e113302180a51172b25426a","modified":1500732049296},{"_id":"public/archives/2017/07/index.html","hash":"ee624d0b0773005e389611772a058573aec28e0b","modified":1500732049296},{"_id":"public/index.html","hash":"64548ff1543377dfec57ff341d8f86af55597d83","modified":1500732049296},{"_id":"public/page/2/index.html","hash":"ea82da606c5b92306b229db823161bff687db04d","modified":1500732049296},{"_id":"public/categories/Tools/index.html","hash":"9132f176b20b6406b991b703a3b63f9afb0894c0","modified":1500732049296},{"_id":"public/categories/SpringData/index.html","hash":"98af9e5aff5d3b842c68e3c29de22decc60c0b72","modified":1500732049297},{"_id":"public/categories/DataStructureAndAlgorithm/index.html","hash":"ece4f4e04be659c6403daeb029ae67157c073bb4","modified":1500732049297},{"_id":"public/tags/随笔/index.html","hash":"5309cdd98a204857608c7b8ae20f361ee242ffa2","modified":1500732049297},{"_id":"public/tags/SpringBoot/index.html","hash":"7b587f8bbd599c5e5cc02bbb08b2ed7c66e38af7","modified":1500732049297},{"_id":"public/tags/IDEA-Mac快捷键/index.html","hash":"070851ccab8c08baeb85bfbab94c98b2229121f3","modified":1500732049297},{"_id":"public/tags/Java面试/index.html","hash":"3113f8690365ef11be3dafb271d5f4e0ed6d9ccc","modified":1500732049297},{"_id":"public/tags/Tools/index.html","hash":"0aa17d990b40cd6132d2fd850755c36f4a46fc2b","modified":1500732049298},{"_id":"public/tags/rxjs/index.html","hash":"0f24c4195d4190fb830c2fb1dbb6ef7c7541994e","modified":1500732049298},{"_id":"public/tags/SpringData/index.html","hash":"7870bd911b0642c68deae7cf6b8bb474f83fa016","modified":1500732049298},{"_id":"public/tags/Elasticsearch/index.html","hash":"9213c5e1b343ccc031e454521a7de4ea19e6c9d7","modified":1500732049298},{"_id":"public/tags/生活感悟/index.html","hash":"e44c708d38758097eee1e87b374b65b8b2b2cdf1","modified":1500732049298},{"_id":"public/tags/DataStructureAndAlgorithm/index.html","hash":"b712f5023a9ba8b9696da1b5edbb1410654a361c","modified":1500732049298},{"_id":"public/images/Java递归调用示意图.png","hash":"98919512140ca79b8b894e0ca7568db01d9ef5e1","modified":1500732049301},{"_id":"public/CNAME","hash":"057d08557902f487a8694c7b2a1e2f1978e0231d","modified":1500732049301},{"_id":"public/favicon-16x16.png","hash":"d9e2a10b5825481495dbaf0d08ee4c3309d88064","modified":1500732049301},{"_id":"public/favicon.ico","hash":"ebd7a5c235dfda4ce3a9e0531138eb7e3f9c7585","modified":1500732049301},{"_id":"public/favicon-96x96.png","hash":"fbb90182a6062decabb297a7ffd658c8422afffa","modified":1500732049302},{"_id":"public/favicon-32x32.png","hash":"be0a23aaca22a8cf930268cb40f1587c3a6a48e6","modified":1500732049302},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1500732049302},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1500732049302},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1500732049303},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1500732049303},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1500732049303},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1500732049303},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1500732049303},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1500732049303},{"_id":"public/img/wechatpay.jpg","hash":"40948fbad0f93ea71333b33a1ff8b793fd26e11b","modified":1500732049303},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1500732049303},{"_id":"public/img/alipay.jpg","hash":"45e8346256b8bcff06aea000ca798ca4c67daa85","modified":1500732049304},{"_id":"public/images/login-changyan.png","hash":"e1416a8df281de9892f08ffcbdbc9800e43fa515","modified":1500732049310},{"_id":"public/images/copy-config.png","hash":"b7edc9d7a15b3c1ba29f00391f75493d75786538","modified":1500732049311},{"_id":"public/images/reg_changyan.png","hash":"968b9485eb99e2eec10d46713bc61dbdcc0f3b01","modified":1500732049312},{"_id":"public/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1500732049316},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1500732049316},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1500732049317},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1500732049317},{"_id":"source/_drafts/终端录制神器.md","hash":"0015e5e93e8416010febe000f7eaf02beceb6e81","modified":1501072989000},{"_id":"source/_posts/终端录制神器.md","hash":"0015e5e93e8416010febe000f7eaf02beceb6e81","modified":1501072987000},{"_id":"source/_drafts/Ubuntu安装Java8环境.md","hash":"6cb4dbb4bf126728a42a15728a35568c6fde5f17","modified":1501076342000},{"_id":"source/_posts/Ubuntu安装Java8环境.md","hash":"6cb4dbb4bf126728a42a15728a35568c6fde5f17","modified":1501076355000},{"_id":"source/_drafts/Mac通过brew安装redis.md","hash":"763470825ef8ee2991bd070065569ed6f6867afe","modified":1501076516000},{"_id":"source/_posts/Mac通过brew安装redis.md","hash":"763470825ef8ee2991bd070065569ed6f6867afe","modified":1501076526000},{"_id":"source/_drafts/Grails中一个日期差引起的思考.md","hash":"de241e69dd1c4af3a68d6d324bf2420ec3c1d7b1","modified":1501684415000},{"_id":"source/_posts/Grails中一个日期差引起的思考.md","hash":"de241e69dd1c4af3a68d6d324bf2420ec3c1d7b1","modified":1501684421000},{"_id":"source/_drafts/生活感慨.md","hash":"524654c95a0f1de1a572615d7eddba7f7b5ea196","modified":1501921905000},{"_id":"source/_posts/生活感慨.md","hash":"524654c95a0f1de1a572615d7eddba7f7b5ea196","modified":1501921904000}],"Category":[{"name":"Tools","_id":"cj5fd43bb0009ubo7jvd3xu7s"},{"name":"SpringData","_id":"cj5fd43bl000iubo73dy869eg"},{"name":"DataStructureAndAlgorithm","_id":"cj5fd43bp000nubo7whbpo7zn"},{"name":"生活","_id":"cj5z11dzx00030so70m0zyu90"},{"name":"随笔","_id":"cj5z1haio0000nlo7zwhfsvvh"}],"Data":[],"Page":[],"Post":[{"title":"2017开工快乐","date":"2017-02-05T13:43:05.000Z","_content":"<center>![2017开工快乐](http://i1.piimg.com/4851/ce0a3e1ef63844b1.jpg)</center>\n\n春节已经结束了，祝愿大家在新的一年多挣钱！在这里给大家分享一份简历模板：\nhttp://resume.f-tm.net/\n\n简历开源地址:\n<https://github.com/googlerobot/resume>","source":"_posts/2017开工快乐.md","raw":"---\ntitle: 2017开工快乐\ndate: 2017-02-05 21:43:05\ntags: 随笔\n---\n<center>![2017开工快乐](http://i1.piimg.com/4851/ce0a3e1ef63844b1.jpg)</center>\n\n春节已经结束了，祝愿大家在新的一年多挣钱！在这里给大家分享一份简历模板：\nhttp://resume.f-tm.net/\n\n简历开源地址:\n<https://github.com/googlerobot/resume>","slug":"2017开工快乐","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43ar0000ubo711si9e1j","content":"<center><img src=\"http://i1.piimg.com/4851/ce0a3e1ef63844b1.jpg\" alt=\"2017开工快乐\"></center>\n\n<p>春节已经结束了，祝愿大家在新的一年多挣钱！在这里给大家分享一份简历模板：<br><a href=\"http://resume.f-tm.net/\" target=\"_blank\" rel=\"external\">http://resume.f-tm.net/</a></p>\n<p>简历开源地址:<br><a href=\"https://github.com/googlerobot/resume\" target=\"_blank\" rel=\"external\">https://github.com/googlerobot/resume</a></p>\n","site":{"data":{}},"excerpt":"","more":"<center><img src=\"http://i1.piimg.com/4851/ce0a3e1ef63844b1.jpg\" alt=\"2017开工快乐\"></center>\n\n<p>春节已经结束了，祝愿大家在新的一年多挣钱！在这里给大家分享一份简历模板：<br><a href=\"http://resume.f-tm.net/\" target=\"_blank\" rel=\"external\">http://resume.f-tm.net/</a></p>\n<p>简历开源地址:<br><a href=\"https://github.com/googlerobot/resume\" target=\"_blank\" rel=\"external\">https://github.com/googlerobot/resume</a></p>\n"},{"title":"SpringBoot学习一","date":"2017-03-12T15:42:17.000Z","_content":"## SpringBoot\n\n> Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.\n\n**遵循建立生产就绪Spring应用程序的观点。SpringBoot支持约定优于配置的惯例，旨在让您尽快启动和运行。**\n\n> Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\". We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.\n\n**SpringBoot可以轻松的创建单独的，生产级的基于Spring的应用，您可以“直接运行”。我们为Spring平台和第三方库提供了开箱即用的设置，这样你就可以有条不斋的开始。大多数的SpringBoot程序只需要很少的Spring配置。 **\n\n### Features\n* Create stand-alone Spring applications\n* Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\n* Provide opinionated 'starter' POMs to simplify your Maven configuration\n* Automatically configure Spring whenever possible\n* Provide production-ready features such as metrics, health checks and externalized configuration\n* Absolutely no code generation and no requirement for XML configuration\n\n### 功能\n* 创建标准独立的Spring应用程序\n* 直接嵌入Tomcat、Jetty或者Undertow（不需要部署WAR文件）\n* 提供建议的‘starter’POM模板以简化您的Maven配置\n* 每当可能时自动配置Spring\n* 提供生产就绪的功能，如指标，运行状况检查和外部化配置\n* 绝对没有代码生成和不需要XML配置\n\n\nThe reference guide includes detailed descriptions of all the features, plus an extensive howto for common use cases.\n该[参考指南](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle)包含所有功能的详细说明，以及广泛的[如何使用](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto)共同使用情况。\n\n### Quick Start\nIf you are Java developer you can use start.spring.io to generate a basic project, follow the \"Quick Start\" example below, or read the reference documentation getting started guide.\n\n### 快速开始\n如果你是一名Java程序员，你可以通过[start.spring.io](https://start.spring.io/)生成基本项目，按照下面的“快速开始”示例或者阅读参考文档的[入门指南](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started)。\n\nThe recommended way to get started using spring-boot in your project is with a dependency management system – the snippet below can be copied and pasted into your build. Need help? See our getting started guides on building with Maven and Gradle.\n\nspring-boot在项目中开始使用的推荐方法是使用依赖关系管理系统 - 下面的代码段可以复制并粘贴到您的构建中。需要帮忙？请参阅我们使用[Maven](https://spring.io/guides/gs/maven/)和 [Gradle](https://spring.io/guides/gs/gradle/)构建的入门指南。\n\nMaven\n```\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.1.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\nGradle\n```\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-starter-web:1.5.1.RELEASE\")\n}\n```\n\n```\nhello/SampleController.java\n```\n```\npackage hello;\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\n\n@Controller\n@EnableAutoConfiguration\npublic class SampleController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        return \"Hello World!\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(SampleController.class, args);\n    }\n}\n```\n\n### Spring Boot CLI\nSpring Boot ships with a command line tool that can be used if you want to quickly prototype with Spring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax, without so much boilerplate code. Follow the instructions in our main documentation if you want to install the Spring Boot CLI.\n\n### Spring Boot 命令行工具\nSpring Boot附带一个命令行工具，如果你想快速使用Spring原型，可以使用它。它允许你运行Groovy脚本，这意味着你有一个熟悉的类似Java的语法，没有那么多的样板代码。如果要[安装Spring Boot CLI](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli)，请按照我们的主要文档中的说明进行[操作](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli)。\n\n\n","source":"_posts/SpringBoot学习一.md","raw":"---\ntitle: SpringBoot学习一\ndate: 2017-03-12 23:42:17\ntags: SpringBoot\n---\n## SpringBoot\n\n> Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.\n\n**遵循建立生产就绪Spring应用程序的观点。SpringBoot支持约定优于配置的惯例，旨在让您尽快启动和运行。**\n\n> Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\". We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.\n\n**SpringBoot可以轻松的创建单独的，生产级的基于Spring的应用，您可以“直接运行”。我们为Spring平台和第三方库提供了开箱即用的设置，这样你就可以有条不斋的开始。大多数的SpringBoot程序只需要很少的Spring配置。 **\n\n### Features\n* Create stand-alone Spring applications\n* Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\n* Provide opinionated 'starter' POMs to simplify your Maven configuration\n* Automatically configure Spring whenever possible\n* Provide production-ready features such as metrics, health checks and externalized configuration\n* Absolutely no code generation and no requirement for XML configuration\n\n### 功能\n* 创建标准独立的Spring应用程序\n* 直接嵌入Tomcat、Jetty或者Undertow（不需要部署WAR文件）\n* 提供建议的‘starter’POM模板以简化您的Maven配置\n* 每当可能时自动配置Spring\n* 提供生产就绪的功能，如指标，运行状况检查和外部化配置\n* 绝对没有代码生成和不需要XML配置\n\n\nThe reference guide includes detailed descriptions of all the features, plus an extensive howto for common use cases.\n该[参考指南](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle)包含所有功能的详细说明，以及广泛的[如何使用](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto)共同使用情况。\n\n### Quick Start\nIf you are Java developer you can use start.spring.io to generate a basic project, follow the \"Quick Start\" example below, or read the reference documentation getting started guide.\n\n### 快速开始\n如果你是一名Java程序员，你可以通过[start.spring.io](https://start.spring.io/)生成基本项目，按照下面的“快速开始”示例或者阅读参考文档的[入门指南](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started)。\n\nThe recommended way to get started using spring-boot in your project is with a dependency management system – the snippet below can be copied and pasted into your build. Need help? See our getting started guides on building with Maven and Gradle.\n\nspring-boot在项目中开始使用的推荐方法是使用依赖关系管理系统 - 下面的代码段可以复制并粘贴到您的构建中。需要帮忙？请参阅我们使用[Maven](https://spring.io/guides/gs/maven/)和 [Gradle](https://spring.io/guides/gs/gradle/)构建的入门指南。\n\nMaven\n```\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.1.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\nGradle\n```\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-starter-web:1.5.1.RELEASE\")\n}\n```\n\n```\nhello/SampleController.java\n```\n```\npackage hello;\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\n\n@Controller\n@EnableAutoConfiguration\npublic class SampleController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        return \"Hello World!\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(SampleController.class, args);\n    }\n}\n```\n\n### Spring Boot CLI\nSpring Boot ships with a command line tool that can be used if you want to quickly prototype with Spring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax, without so much boilerplate code. Follow the instructions in our main documentation if you want to install the Spring Boot CLI.\n\n### Spring Boot 命令行工具\nSpring Boot附带一个命令行工具，如果你想快速使用Spring原型，可以使用它。它允许你运行Groovy脚本，这意味着你有一个熟悉的类似Java的语法，没有那么多的样板代码。如果要[安装Spring Boot CLI](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli)，请按照我们的主要文档中的说明进行[操作](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli)。\n\n\n","slug":"SpringBoot学习一","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43aw0001ubo7be7np46t","content":"<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><blockquote>\n<p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p>\n</blockquote>\n<p><strong>遵循建立生产就绪Spring应用程序的观点。SpringBoot支持约定优于配置的惯例，旨在让您尽快启动和运行。</strong></p>\n<blockquote>\n<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p>\n</blockquote>\n<p><strong>SpringBoot可以轻松的创建单独的，生产级的基于Spring的应用，您可以“直接运行”。我们为Spring平台和第三方库提供了开箱即用的设置，这样你就可以有条不斋的开始。大多数的SpringBoot程序只需要很少的Spring配置。 </strong></p>\n<h3 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h3><ul>\n<li>Create stand-alone Spring applications</li>\n<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li>\n<li>Provide opinionated ‘starter’ POMs to simplify your Maven configuration</li>\n<li>Automatically configure Spring whenever possible</li>\n<li>Provide production-ready features such as metrics, health checks and externalized configuration</li>\n<li>Absolutely no code generation and no requirement for XML configuration</li>\n</ul>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><ul>\n<li>创建标准独立的Spring应用程序</li>\n<li>直接嵌入Tomcat、Jetty或者Undertow（不需要部署WAR文件）</li>\n<li>提供建议的‘starter’POM模板以简化您的Maven配置</li>\n<li>每当可能时自动配置Spring</li>\n<li>提供生产就绪的功能，如指标，运行状况检查和外部化配置</li>\n<li>绝对没有代码生成和不需要XML配置</li>\n</ul>\n<p>The reference guide includes detailed descriptions of all the features, plus an extensive howto for common use cases.<br>该<a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle\" target=\"_blank\" rel=\"external\">参考指南</a>包含所有功能的详细说明，以及广泛的<a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto\" target=\"_blank\" rel=\"external\">如何使用</a>共同使用情况。</p>\n<h3 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h3><p>If you are Java developer you can use start.spring.io to generate a basic project, follow the “Quick Start” example below, or read the reference documentation getting started guide.</p>\n<h3 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h3><p>如果你是一名Java程序员，你可以通过<a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"external\">start.spring.io</a>生成基本项目，按照下面的“快速开始”示例或者阅读参考文档的<a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started\" target=\"_blank\" rel=\"external\">入门指南</a>。</p>\n<p>The recommended way to get started using spring-boot in your project is with a dependency management system – the snippet below can be copied and pasted into your build. Need help? See our getting started guides on building with Maven and Gradle.</p>\n<p>spring-boot在项目中开始使用的推荐方法是使用依赖关系管理系统 - 下面的代码段可以复制并粘贴到您的构建中。需要帮忙？请参阅我们使用<a href=\"https://spring.io/guides/gs/maven/\" target=\"_blank\" rel=\"external\">Maven</a>和 <a href=\"https://spring.io/guides/gs/gradle/\" target=\"_blank\" rel=\"external\">Gradle</a>构建的入门指南。</p>\n<p>Maven<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p>\n<p>Gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile(&quot;org.springframework.boot:spring-boot-starter-web:1.5.1.RELEASE&quot;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello/SampleController.java</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\"></div><div class=\"line\">@Controller</div><div class=\"line\">@EnableAutoConfiguration</div><div class=\"line\">public class SampleController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(&quot;/&quot;)</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    String home() &#123;</div><div class=\"line\">        return &quot;Hello World!&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        SpringApplication.run(SampleController.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Spring-Boot-CLI\"><a href=\"#Spring-Boot-CLI\" class=\"headerlink\" title=\"Spring Boot CLI\"></a>Spring Boot CLI</h3><p>Spring Boot ships with a command line tool that can be used if you want to quickly prototype with Spring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax, without so much boilerplate code. Follow the instructions in our main documentation if you want to install the Spring Boot CLI.</p>\n<h3 id=\"Spring-Boot-命令行工具\"><a href=\"#Spring-Boot-命令行工具\" class=\"headerlink\" title=\"Spring Boot 命令行工具\"></a>Spring Boot 命令行工具</h3><p>Spring Boot附带一个命令行工具，如果你想快速使用Spring原型，可以使用它。它允许你运行Groovy脚本，这意味着你有一个熟悉的类似Java的语法，没有那么多的样板代码。如果要<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli\" target=\"_blank\" rel=\"external\">安装Spring Boot CLI</a>，请按照我们的主要文档中的说明进行<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli\" target=\"_blank\" rel=\"external\">操作</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><blockquote>\n<p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p>\n</blockquote>\n<p><strong>遵循建立生产就绪Spring应用程序的观点。SpringBoot支持约定优于配置的惯例，旨在让您尽快启动和运行。</strong></p>\n<blockquote>\n<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p>\n</blockquote>\n<p><strong>SpringBoot可以轻松的创建单独的，生产级的基于Spring的应用，您可以“直接运行”。我们为Spring平台和第三方库提供了开箱即用的设置，这样你就可以有条不斋的开始。大多数的SpringBoot程序只需要很少的Spring配置。 </strong></p>\n<h3 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h3><ul>\n<li>Create stand-alone Spring applications</li>\n<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li>\n<li>Provide opinionated ‘starter’ POMs to simplify your Maven configuration</li>\n<li>Automatically configure Spring whenever possible</li>\n<li>Provide production-ready features such as metrics, health checks and externalized configuration</li>\n<li>Absolutely no code generation and no requirement for XML configuration</li>\n</ul>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><ul>\n<li>创建标准独立的Spring应用程序</li>\n<li>直接嵌入Tomcat、Jetty或者Undertow（不需要部署WAR文件）</li>\n<li>提供建议的‘starter’POM模板以简化您的Maven配置</li>\n<li>每当可能时自动配置Spring</li>\n<li>提供生产就绪的功能，如指标，运行状况检查和外部化配置</li>\n<li>绝对没有代码生成和不需要XML配置</li>\n</ul>\n<p>The reference guide includes detailed descriptions of all the features, plus an extensive howto for common use cases.<br>该<a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle\" target=\"_blank\" rel=\"external\">参考指南</a>包含所有功能的详细说明，以及广泛的<a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto\" target=\"_blank\" rel=\"external\">如何使用</a>共同使用情况。</p>\n<h3 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h3><p>If you are Java developer you can use start.spring.io to generate a basic project, follow the “Quick Start” example below, or read the reference documentation getting started guide.</p>\n<h3 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h3><p>如果你是一名Java程序员，你可以通过<a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"external\">start.spring.io</a>生成基本项目，按照下面的“快速开始”示例或者阅读参考文档的<a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started\" target=\"_blank\" rel=\"external\">入门指南</a>。</p>\n<p>The recommended way to get started using spring-boot in your project is with a dependency management system – the snippet below can be copied and pasted into your build. Need help? See our getting started guides on building with Maven and Gradle.</p>\n<p>spring-boot在项目中开始使用的推荐方法是使用依赖关系管理系统 - 下面的代码段可以复制并粘贴到您的构建中。需要帮忙？请参阅我们使用<a href=\"https://spring.io/guides/gs/maven/\" target=\"_blank\" rel=\"external\">Maven</a>和 <a href=\"https://spring.io/guides/gs/gradle/\" target=\"_blank\" rel=\"external\">Gradle</a>构建的入门指南。</p>\n<p>Maven<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p>\n<p>Gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile(&quot;org.springframework.boot:spring-boot-starter-web:1.5.1.RELEASE&quot;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello/SampleController.java</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\"></div><div class=\"line\">@Controller</div><div class=\"line\">@EnableAutoConfiguration</div><div class=\"line\">public class SampleController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(&quot;/&quot;)</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    String home() &#123;</div><div class=\"line\">        return &quot;Hello World!&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        SpringApplication.run(SampleController.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Spring-Boot-CLI\"><a href=\"#Spring-Boot-CLI\" class=\"headerlink\" title=\"Spring Boot CLI\"></a>Spring Boot CLI</h3><p>Spring Boot ships with a command line tool that can be used if you want to quickly prototype with Spring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax, without so much boilerplate code. Follow the instructions in our main documentation if you want to install the Spring Boot CLI.</p>\n<h3 id=\"Spring-Boot-命令行工具\"><a href=\"#Spring-Boot-命令行工具\" class=\"headerlink\" title=\"Spring Boot 命令行工具\"></a>Spring Boot 命令行工具</h3><p>Spring Boot附带一个命令行工具，如果你想快速使用Spring原型，可以使用它。它允许你运行Groovy脚本，这意味着你有一个熟悉的类似Java的语法，没有那么多的样板代码。如果要<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli\" target=\"_blank\" rel=\"external\">安装Spring Boot CLI</a>，请按照我们的主要文档中的说明进行<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli\" target=\"_blank\" rel=\"external\">操作</a>。</p>\n"},{"title":"IDEA Mac下快捷键奇淫技巧","reward":true,"date":"2017-07-22T13:59:00.000Z","_content":"* 为你的ide设置背景图片；\n只需要双击enter键，然后输入*set back*， 找到*Set Background Image* 选择你想要添加的背景图片即可。如果不需要设置图片，再次打开单击*clear*按钮即可清除。\n*  若果你想展示自己点击的按钮快捷键，可以安装*Presentation Assistant*即可，安装完之后需要重启。\n*  如果你想快速跳到某一个类的某一行，那么你可以使用*Command+O*,然后键入你想要跳转的类名称，然后输入冒号加行号；\n* 如果你想看到你进入这个类中总共有哪些方法，你可以使用*Command+7*，此时便可以显示这个类中的所有方法；\n* 如果你想找到某个类中的某个字段，你可以使用*Command+Option+O*,然后通过\"/id\"的方式，就可以找到所有包含id属性的类；\n* 如果你想查看某个类中的变量或者方法在哪儿使用，直接使用*Command+B*即可；\n* 如果你想查看某个变量的引用定义详情，则可以选中这个变量，然后使用*Command+Y*；\n* 如果你想扩展左边项目结构窗口的大小，则可以使用*Command+Shift+>(右方向键)*；\n* 如果你想对编辑器某些窗口进行显示和隐藏，则可以双击Shift键，然后输入\"#editor \",则可以对当前编辑器进行一些快速设置；\n* 如果你想在idea中快速测试rest服务，则可以双击*Shift*然后输入*test rest*，找到最后一项打开*rest test client*便可以对服务进行测试调用；\n* 如果你想双击*Shift*后，键入*ws*便可以打开*test restful client tool*，可以在keymap设置中输入*test rest*，找到*Tools--Test Restful Webservice*，然后选中右键选择*Abbreviation*设置*ws*，点击确定，然后双击*Shift*，输入*ws*，这时候第一项就是这个工具，此时便可以快速进入*test restful client tool*工具窗口；\n* 如果你想对某个类进行全屏编辑，则可以使用*Command+Shift+F12*；\n* 如果想快速打开项目结构视图，则可以使用*Command+1*；\n* 如果你想对代码给别人展示或者review代码的时候，想放大某个类，则可以在*view*视图下选择：*Enter Presenttion Mode*即可，当然你也可以设置快捷键进行绑定，这个功能特别有用,比如我设置的是*Command+Shift+S*，这样当需要对某个文件进行展示时，直接按快捷键即可，在*Presenttion Mode*窗口中，我们可以使用*Command+E*显示最近浏览的文件，可以快速切换展示；\n* 编辑器垂直分割和水平分割可以在菜单来*Window*下的*edit tab*中找到并绑定对应的快捷键；\n* 当选择一行或者某个列时，使用*option*+上下方向键，不要使用鼠标勾选的方式；\n* 如果你使用了两次以上剪贴操作，你想查看前几次的剪贴内容，则可以使用*Commad+Shift+V*,此时便可以找到前几次的剪贴记录；\n* 如果你选择了某一行，想向上下选取，则使用*option*+上下方向键后，可以再使用*shift+option*+上下方向键；\n* 当你需要对代码样式进行一些改变时，则可以选中代码片段 然后使用*option+Enter*；\n* 如果你想在某个包下面建立一个类，你可以使用*Command+上方向键*激活导航bar，然后选择相应的目录，然后使用*Command+N*,新建你需要新建的类型即可，不要使用鼠标选择File新建，这样会影响效率；\n* 如果不想在view中显示navbar，则可以设置navbar隐藏，方法：双击*shift*，输入*nav*，找到*view navigation bar* 选择off，然后使用*Command*+向上方向键便可以激活navbar；\n* 如果你想使用BufferReader读取一个文件，此时你键入`BufferReader bf = new`的时候可以使用*shift+option+space*智能导入其派生类，由于 *shift+option+space*快键键可能会和输入法切换会有冲突，我设置成了*shift+option+command+space*；\n* 如果你想在idea中引入包或者包裹异常，则可以使用*option+Enter*；\n* 如果你想要对某个变量进行NPE验证，那么只需要使用这个变量名打\".\"然后输入*not*，这时候选择相应的代码模板即可；\n* 如果你想在代码的末尾添加分号，不要移动光标添加，直接使用*shift+command+回车*即可；\n* 如果你想手写一个简单的JSON，可能需要使用转义字符进行转义双引号，此时你可以在字符串中使用*option*+回车选择*Inject language reference*选择JSON，然后再次使用*option+回车键*，选择*Edit Json Fragement*即可，此时你便可以在JSON 窗口中按照正常的方式编写JSON字符串了，IDE会自动帮你添加转义字符；同样的方式我们可以选择*Regex*，对正则进行编写，并且可以帮我们进行对正则校验，使用方法和JSON 输入的方式类似；\n* 如果需要多行选中，则可以使用*option+shift+鼠标点击* 即可，或者可以使用*control+G*,然后继续选择你需要多行同时编辑的行，如果选择的行数多了，可以使用*control+shift+g*进行减少选中；\n* 如果需要对选中的变量或者代码片段进行重构，则可以使用*control+T*；\n* 对bool参数值进行转换，则可以对定义的bool变量选中然后使用*control+T*，输入*invert*，找到*invert boolean*，便可以对变量的值进行反转；\n* 如果想对项目进行版本控制管理，使用*Command+K*或者使用*Ctrl+V*；\n* 使用*control+tab*可以进行对不同的文件进行选择显示打开；\n* 如果你想查看你目前使用快捷键的情况，则可以在idea的*help*菜单找到*Poductivity Guide*查看；\n**注意：以上快捷键主要是Mac系统下的操作，如果你使用的是非Mac系统，那么你只需要安装Presentation Assistant便可以显示Linux和Windows上的快捷键**\n如果想深入学习，可以参考该视频链接：\n<https://www.youtube.com/watch?v=M2eL5YuqecQ&list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&index=2>","source":"_posts/IDEA-Mac下快捷键奇淫技巧.md","raw":"title: IDEA Mac下快捷键奇淫技巧\ntags:\n  - 'IDEA,Mac快捷键'\nreward: true\ncategories: []\ndate: 2017-07-22 21:59:00\n---\n* 为你的ide设置背景图片；\n只需要双击enter键，然后输入*set back*， 找到*Set Background Image* 选择你想要添加的背景图片即可。如果不需要设置图片，再次打开单击*clear*按钮即可清除。\n*  若果你想展示自己点击的按钮快捷键，可以安装*Presentation Assistant*即可，安装完之后需要重启。\n*  如果你想快速跳到某一个类的某一行，那么你可以使用*Command+O*,然后键入你想要跳转的类名称，然后输入冒号加行号；\n* 如果你想看到你进入这个类中总共有哪些方法，你可以使用*Command+7*，此时便可以显示这个类中的所有方法；\n* 如果你想找到某个类中的某个字段，你可以使用*Command+Option+O*,然后通过\"/id\"的方式，就可以找到所有包含id属性的类；\n* 如果你想查看某个类中的变量或者方法在哪儿使用，直接使用*Command+B*即可；\n* 如果你想查看某个变量的引用定义详情，则可以选中这个变量，然后使用*Command+Y*；\n* 如果你想扩展左边项目结构窗口的大小，则可以使用*Command+Shift+>(右方向键)*；\n* 如果你想对编辑器某些窗口进行显示和隐藏，则可以双击Shift键，然后输入\"#editor \",则可以对当前编辑器进行一些快速设置；\n* 如果你想在idea中快速测试rest服务，则可以双击*Shift*然后输入*test rest*，找到最后一项打开*rest test client*便可以对服务进行测试调用；\n* 如果你想双击*Shift*后，键入*ws*便可以打开*test restful client tool*，可以在keymap设置中输入*test rest*，找到*Tools--Test Restful Webservice*，然后选中右键选择*Abbreviation*设置*ws*，点击确定，然后双击*Shift*，输入*ws*，这时候第一项就是这个工具，此时便可以快速进入*test restful client tool*工具窗口；\n* 如果你想对某个类进行全屏编辑，则可以使用*Command+Shift+F12*；\n* 如果想快速打开项目结构视图，则可以使用*Command+1*；\n* 如果你想对代码给别人展示或者review代码的时候，想放大某个类，则可以在*view*视图下选择：*Enter Presenttion Mode*即可，当然你也可以设置快捷键进行绑定，这个功能特别有用,比如我设置的是*Command+Shift+S*，这样当需要对某个文件进行展示时，直接按快捷键即可，在*Presenttion Mode*窗口中，我们可以使用*Command+E*显示最近浏览的文件，可以快速切换展示；\n* 编辑器垂直分割和水平分割可以在菜单来*Window*下的*edit tab*中找到并绑定对应的快捷键；\n* 当选择一行或者某个列时，使用*option*+上下方向键，不要使用鼠标勾选的方式；\n* 如果你使用了两次以上剪贴操作，你想查看前几次的剪贴内容，则可以使用*Commad+Shift+V*,此时便可以找到前几次的剪贴记录；\n* 如果你选择了某一行，想向上下选取，则使用*option*+上下方向键后，可以再使用*shift+option*+上下方向键；\n* 当你需要对代码样式进行一些改变时，则可以选中代码片段 然后使用*option+Enter*；\n* 如果你想在某个包下面建立一个类，你可以使用*Command+上方向键*激活导航bar，然后选择相应的目录，然后使用*Command+N*,新建你需要新建的类型即可，不要使用鼠标选择File新建，这样会影响效率；\n* 如果不想在view中显示navbar，则可以设置navbar隐藏，方法：双击*shift*，输入*nav*，找到*view navigation bar* 选择off，然后使用*Command*+向上方向键便可以激活navbar；\n* 如果你想使用BufferReader读取一个文件，此时你键入`BufferReader bf = new`的时候可以使用*shift+option+space*智能导入其派生类，由于 *shift+option+space*快键键可能会和输入法切换会有冲突，我设置成了*shift+option+command+space*；\n* 如果你想在idea中引入包或者包裹异常，则可以使用*option+Enter*；\n* 如果你想要对某个变量进行NPE验证，那么只需要使用这个变量名打\".\"然后输入*not*，这时候选择相应的代码模板即可；\n* 如果你想在代码的末尾添加分号，不要移动光标添加，直接使用*shift+command+回车*即可；\n* 如果你想手写一个简单的JSON，可能需要使用转义字符进行转义双引号，此时你可以在字符串中使用*option*+回车选择*Inject language reference*选择JSON，然后再次使用*option+回车键*，选择*Edit Json Fragement*即可，此时你便可以在JSON 窗口中按照正常的方式编写JSON字符串了，IDE会自动帮你添加转义字符；同样的方式我们可以选择*Regex*，对正则进行编写，并且可以帮我们进行对正则校验，使用方法和JSON 输入的方式类似；\n* 如果需要多行选中，则可以使用*option+shift+鼠标点击* 即可，或者可以使用*control+G*,然后继续选择你需要多行同时编辑的行，如果选择的行数多了，可以使用*control+shift+g*进行减少选中；\n* 如果需要对选中的变量或者代码片段进行重构，则可以使用*control+T*；\n* 对bool参数值进行转换，则可以对定义的bool变量选中然后使用*control+T*，输入*invert*，找到*invert boolean*，便可以对变量的值进行反转；\n* 如果想对项目进行版本控制管理，使用*Command+K*或者使用*Ctrl+V*；\n* 使用*control+tab*可以进行对不同的文件进行选择显示打开；\n* 如果你想查看你目前使用快捷键的情况，则可以在idea的*help*菜单找到*Poductivity Guide*查看；\n**注意：以上快捷键主要是Mac系统下的操作，如果你使用的是非Mac系统，那么你只需要安装Presentation Assistant便可以显示Linux和Windows上的快捷键**\n如果想深入学习，可以参考该视频链接：\n<https://www.youtube.com/watch?v=M2eL5YuqecQ&list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&index=2>","slug":"IDEA-Mac下快捷键奇淫技巧","published":1,"updated":"2017-07-25T03:55:12.000Z","_id":"cj5fd43b30003ubo7w7bioir9","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>为你的ide设置背景图片；<br>只需要双击enter键，然后输入<em>set back</em>， 找到<em>Set Background Image</em> 选择你想要添加的背景图片即可。如果不需要设置图片，再次打开单击<em>clear</em>按钮即可清除。</li>\n<li>若果你想展示自己点击的按钮快捷键，可以安装<em>Presentation Assistant</em>即可，安装完之后需要重启。</li>\n<li>如果你想快速跳到某一个类的某一行，那么你可以使用<em>Command+O</em>,然后键入你想要跳转的类名称，然后输入冒号加行号；</li>\n<li>如果你想看到你进入这个类中总共有哪些方法，你可以使用<em>Command+7</em>，此时便可以显示这个类中的所有方法；</li>\n<li>如果你想找到某个类中的某个字段，你可以使用<em>Command+Option+O</em>,然后通过”/id”的方式，就可以找到所有包含id属性的类；</li>\n<li>如果你想查看某个类中的变量或者方法在哪儿使用，直接使用<em>Command+B</em>即可；</li>\n<li>如果你想查看某个变量的引用定义详情，则可以选中这个变量，然后使用<em>Command+Y</em>；</li>\n<li>如果你想扩展左边项目结构窗口的大小，则可以使用<em>Command+Shift+&gt;(右方向键)</em>；</li>\n<li>如果你想对编辑器某些窗口进行显示和隐藏，则可以双击Shift键，然后输入”#editor “,则可以对当前编辑器进行一些快速设置；</li>\n<li>如果你想在idea中快速测试rest服务，则可以双击<em>Shift</em>然后输入<em>test rest</em>，找到最后一项打开<em>rest test client</em>便可以对服务进行测试调用；</li>\n<li>如果你想双击<em>Shift</em>后，键入<em>ws</em>便可以打开<em>test restful client tool</em>，可以在keymap设置中输入<em>test rest</em>，找到<em>Tools–Test Restful Webservice</em>，然后选中右键选择<em>Abbreviation</em>设置<em>ws</em>，点击确定，然后双击<em>Shift</em>，输入<em>ws</em>，这时候第一项就是这个工具，此时便可以快速进入<em>test restful client tool</em>工具窗口；</li>\n<li>如果你想对某个类进行全屏编辑，则可以使用<em>Command+Shift+F12</em>；</li>\n<li>如果想快速打开项目结构视图，则可以使用<em>Command+1</em>；</li>\n<li>如果你想对代码给别人展示或者review代码的时候，想放大某个类，则可以在<em>view</em>视图下选择：<em>Enter Presenttion Mode</em>即可，当然你也可以设置快捷键进行绑定，这个功能特别有用,比如我设置的是<em>Command+Shift+S</em>，这样当需要对某个文件进行展示时，直接按快捷键即可，在<em>Presenttion Mode</em>窗口中，我们可以使用<em>Command+E</em>显示最近浏览的文件，可以快速切换展示；</li>\n<li>编辑器垂直分割和水平分割可以在菜单来<em>Window</em>下的<em>edit tab</em>中找到并绑定对应的快捷键；</li>\n<li>当选择一行或者某个列时，使用<em>option</em>+上下方向键，不要使用鼠标勾选的方式；</li>\n<li>如果你使用了两次以上剪贴操作，你想查看前几次的剪贴内容，则可以使用<em>Commad+Shift+V</em>,此时便可以找到前几次的剪贴记录；</li>\n<li>如果你选择了某一行，想向上下选取，则使用<em>option</em>+上下方向键后，可以再使用<em>shift+option</em>+上下方向键；</li>\n<li>当你需要对代码样式进行一些改变时，则可以选中代码片段 然后使用<em>option+Enter</em>；</li>\n<li>如果你想在某个包下面建立一个类，你可以使用<em>Command+上方向键</em>激活导航bar，然后选择相应的目录，然后使用<em>Command+N</em>,新建你需要新建的类型即可，不要使用鼠标选择File新建，这样会影响效率；</li>\n<li>如果不想在view中显示navbar，则可以设置navbar隐藏，方法：双击<em>shift</em>，输入<em>nav</em>，找到<em>view navigation bar</em> 选择off，然后使用<em>Command</em>+向上方向键便可以激活navbar；</li>\n<li>如果你想使用BufferReader读取一个文件，此时你键入<code>BufferReader bf = new</code>的时候可以使用<em>shift+option+space</em>智能导入其派生类，由于 <em>shift+option+space</em>快键键可能会和输入法切换会有冲突，我设置成了<em>shift+option+command+space</em>；</li>\n<li>如果你想在idea中引入包或者包裹异常，则可以使用<em>option+Enter</em>；</li>\n<li>如果你想要对某个变量进行NPE验证，那么只需要使用这个变量名打”.”然后输入<em>not</em>，这时候选择相应的代码模板即可；</li>\n<li>如果你想在代码的末尾添加分号，不要移动光标添加，直接使用<em>shift+command+回车</em>即可；</li>\n<li>如果你想手写一个简单的JSON，可能需要使用转义字符进行转义双引号，此时你可以在字符串中使用<em>option</em>+回车选择<em>Inject language reference</em>选择JSON，然后再次使用<em>option+回车键</em>，选择<em>Edit Json Fragement</em>即可，此时你便可以在JSON 窗口中按照正常的方式编写JSON字符串了，IDE会自动帮你添加转义字符；同样的方式我们可以选择<em>Regex</em>，对正则进行编写，并且可以帮我们进行对正则校验，使用方法和JSON 输入的方式类似；</li>\n<li>如果需要多行选中，则可以使用<em>option+shift+鼠标点击</em> 即可，或者可以使用<em>control+G</em>,然后继续选择你需要多行同时编辑的行，如果选择的行数多了，可以使用<em>control+shift+g</em>进行减少选中；</li>\n<li>如果需要对选中的变量或者代码片段进行重构，则可以使用<em>control+T</em>；</li>\n<li>对bool参数值进行转换，则可以对定义的bool变量选中然后使用<em>control+T</em>，输入<em>invert</em>，找到<em>invert boolean</em>，便可以对变量的值进行反转；</li>\n<li>如果想对项目进行版本控制管理，使用<em>Command+K</em>或者使用<em>Ctrl+V</em>；</li>\n<li>使用<em>control+tab</em>可以进行对不同的文件进行选择显示打开；</li>\n<li>如果你想查看你目前使用快捷键的情况，则可以在idea的<em>help</em>菜单找到<em>Poductivity Guide</em>查看；<br><strong>注意：以上快捷键主要是Mac系统下的操作，如果你使用的是非Mac系统，那么你只需要安装Presentation Assistant便可以显示Linux和Windows上的快捷键</strong><br>如果想深入学习，可以参考该视频链接：<br><a href=\"https://www.youtube.com/watch?v=M2eL5YuqecQ&amp;list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&amp;index=2\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=M2eL5YuqecQ&amp;list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&amp;index=2</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>为你的ide设置背景图片；<br>只需要双击enter键，然后输入<em>set back</em>， 找到<em>Set Background Image</em> 选择你想要添加的背景图片即可。如果不需要设置图片，再次打开单击<em>clear</em>按钮即可清除。</li>\n<li>若果你想展示自己点击的按钮快捷键，可以安装<em>Presentation Assistant</em>即可，安装完之后需要重启。</li>\n<li>如果你想快速跳到某一个类的某一行，那么你可以使用<em>Command+O</em>,然后键入你想要跳转的类名称，然后输入冒号加行号；</li>\n<li>如果你想看到你进入这个类中总共有哪些方法，你可以使用<em>Command+7</em>，此时便可以显示这个类中的所有方法；</li>\n<li>如果你想找到某个类中的某个字段，你可以使用<em>Command+Option+O</em>,然后通过”/id”的方式，就可以找到所有包含id属性的类；</li>\n<li>如果你想查看某个类中的变量或者方法在哪儿使用，直接使用<em>Command+B</em>即可；</li>\n<li>如果你想查看某个变量的引用定义详情，则可以选中这个变量，然后使用<em>Command+Y</em>；</li>\n<li>如果你想扩展左边项目结构窗口的大小，则可以使用<em>Command+Shift+&gt;(右方向键)</em>；</li>\n<li>如果你想对编辑器某些窗口进行显示和隐藏，则可以双击Shift键，然后输入”#editor “,则可以对当前编辑器进行一些快速设置；</li>\n<li>如果你想在idea中快速测试rest服务，则可以双击<em>Shift</em>然后输入<em>test rest</em>，找到最后一项打开<em>rest test client</em>便可以对服务进行测试调用；</li>\n<li>如果你想双击<em>Shift</em>后，键入<em>ws</em>便可以打开<em>test restful client tool</em>，可以在keymap设置中输入<em>test rest</em>，找到<em>Tools–Test Restful Webservice</em>，然后选中右键选择<em>Abbreviation</em>设置<em>ws</em>，点击确定，然后双击<em>Shift</em>，输入<em>ws</em>，这时候第一项就是这个工具，此时便可以快速进入<em>test restful client tool</em>工具窗口；</li>\n<li>如果你想对某个类进行全屏编辑，则可以使用<em>Command+Shift+F12</em>；</li>\n<li>如果想快速打开项目结构视图，则可以使用<em>Command+1</em>；</li>\n<li>如果你想对代码给别人展示或者review代码的时候，想放大某个类，则可以在<em>view</em>视图下选择：<em>Enter Presenttion Mode</em>即可，当然你也可以设置快捷键进行绑定，这个功能特别有用,比如我设置的是<em>Command+Shift+S</em>，这样当需要对某个文件进行展示时，直接按快捷键即可，在<em>Presenttion Mode</em>窗口中，我们可以使用<em>Command+E</em>显示最近浏览的文件，可以快速切换展示；</li>\n<li>编辑器垂直分割和水平分割可以在菜单来<em>Window</em>下的<em>edit tab</em>中找到并绑定对应的快捷键；</li>\n<li>当选择一行或者某个列时，使用<em>option</em>+上下方向键，不要使用鼠标勾选的方式；</li>\n<li>如果你使用了两次以上剪贴操作，你想查看前几次的剪贴内容，则可以使用<em>Commad+Shift+V</em>,此时便可以找到前几次的剪贴记录；</li>\n<li>如果你选择了某一行，想向上下选取，则使用<em>option</em>+上下方向键后，可以再使用<em>shift+option</em>+上下方向键；</li>\n<li>当你需要对代码样式进行一些改变时，则可以选中代码片段 然后使用<em>option+Enter</em>；</li>\n<li>如果你想在某个包下面建立一个类，你可以使用<em>Command+上方向键</em>激活导航bar，然后选择相应的目录，然后使用<em>Command+N</em>,新建你需要新建的类型即可，不要使用鼠标选择File新建，这样会影响效率；</li>\n<li>如果不想在view中显示navbar，则可以设置navbar隐藏，方法：双击<em>shift</em>，输入<em>nav</em>，找到<em>view navigation bar</em> 选择off，然后使用<em>Command</em>+向上方向键便可以激活navbar；</li>\n<li>如果你想使用BufferReader读取一个文件，此时你键入<code>BufferReader bf = new</code>的时候可以使用<em>shift+option+space</em>智能导入其派生类，由于 <em>shift+option+space</em>快键键可能会和输入法切换会有冲突，我设置成了<em>shift+option+command+space</em>；</li>\n<li>如果你想在idea中引入包或者包裹异常，则可以使用<em>option+Enter</em>；</li>\n<li>如果你想要对某个变量进行NPE验证，那么只需要使用这个变量名打”.”然后输入<em>not</em>，这时候选择相应的代码模板即可；</li>\n<li>如果你想在代码的末尾添加分号，不要移动光标添加，直接使用<em>shift+command+回车</em>即可；</li>\n<li>如果你想手写一个简单的JSON，可能需要使用转义字符进行转义双引号，此时你可以在字符串中使用<em>option</em>+回车选择<em>Inject language reference</em>选择JSON，然后再次使用<em>option+回车键</em>，选择<em>Edit Json Fragement</em>即可，此时你便可以在JSON 窗口中按照正常的方式编写JSON字符串了，IDE会自动帮你添加转义字符；同样的方式我们可以选择<em>Regex</em>，对正则进行编写，并且可以帮我们进行对正则校验，使用方法和JSON 输入的方式类似；</li>\n<li>如果需要多行选中，则可以使用<em>option+shift+鼠标点击</em> 即可，或者可以使用<em>control+G</em>,然后继续选择你需要多行同时编辑的行，如果选择的行数多了，可以使用<em>control+shift+g</em>进行减少选中；</li>\n<li>如果需要对选中的变量或者代码片段进行重构，则可以使用<em>control+T</em>；</li>\n<li>对bool参数值进行转换，则可以对定义的bool变量选中然后使用<em>control+T</em>，输入<em>invert</em>，找到<em>invert boolean</em>，便可以对变量的值进行反转；</li>\n<li>如果想对项目进行版本控制管理，使用<em>Command+K</em>或者使用<em>Ctrl+V</em>；</li>\n<li>使用<em>control+tab</em>可以进行对不同的文件进行选择显示打开；</li>\n<li>如果你想查看你目前使用快捷键的情况，则可以在idea的<em>help</em>菜单找到<em>Poductivity Guide</em>查看；<br><strong>注意：以上快捷键主要是Mac系统下的操作，如果你使用的是非Mac系统，那么你只需要安装Presentation Assistant便可以显示Linux和Windows上的快捷键</strong><br>如果想深入学习，可以参考该视频链接：<br><a href=\"https://www.youtube.com/watch?v=M2eL5YuqecQ&amp;list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&amp;index=2\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=M2eL5YuqecQ&amp;list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&amp;index=2</a></li>\n</ul>\n"},{"title":"Java面试(一)","date":"2017-03-04T16:04:28.000Z","_content":"## Java基础\n\n### 抽象类和接口的区别？\n1. 抽象类中可以包含抽象方法和非抽象方法，接口只能包含公开的抽象方法；\n2. 抽象类中的变量是各种类型的，而接口只能包含public abstract final 类型；\n3. 接口中不能含有静态代码块和静态方法，而抽象类中可以包含；\n4. 一个类只能继承一个抽象类，但是可以实现多个接口；\n5. 抽象类可以有构造方法，接口不能有；\n\n### HashMap和HashTable的区别？\n* HashTable是基于陈旧的Dictionary的Map接口的实现，而HashMap是基于哈希表的Map接口的实现\n* 从方法上看，HashMap去掉了HashTable的contains方法\n* HashTable是同步的（线程安全），而HashMap是线程不安全的，效率上HashMap更快\n* HashMap允许空键值，HashTable不允许，可以查看HashTable的实现源码：\n```\n...\npublic synchronized V put(K key, V value) {\n    // Make sure the value is not null\n    if (value == null) {\n        throw new NullPointerException();\n    }\n\n    // Makes sure the key is not already in the hashtable.\n    Entry<?,?> tab[] = table;\n    int hash = key.hashCode();\n    int index = (hash & 0x7FFFFFFF) % tab.length;\n    @SuppressWarnings(\"unchecked\")\n    Entry<K,V> entry = (Entry<K,V>)tab[index];\n    for(; entry != null ; entry = entry.next) {\n        if ((entry.hash == hash) && entry.key.equals(key)) {\n            V old = entry.value;\n            entry.value = value;\n            return old;\n        }\n    }\n\n    addEntry(hash, key, value, index);\n    return null;\n}\n...\n```\n* HashMap的iterator迭代器执行快速失败机制，也就是说在迭代过程中修改集合结构，除非调用迭代器自身的remove方法，否则以其他任何方式的修改都将抛出并发修改异常。而Hashtable返回的Enumeration不是快速失败的。\n\n### Java中如何创建一个新线程？\n1. 实现runable接口并重写run方法；\n2. 继承Thread类重写run方法；\n3. 实现Callable接口，重写call()方法；使用FutureTask类包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值；\n使用FutureTask对象作为Thread对象的target创建并启动线程，调用FutureTask对象的get()方法获得子线程执行结束后的返回值；\n\n### 什么是AIDL？\n* AIDL全称Android Interface Definition Language（AndRoid接口描述语言）是一种借口描述语言;\n* 编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程跨界对象访问的目的.AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。\n* AIDL支持的数据类型有Stirng，list，map，All native java datatype\n\n### 求计算1-2+3-4+5-6...的方法，n很大，考虑性能？\n```\npublic static  long fn(long n)\n    {\n        if(n<=0)\n        {\n            //1-2+3-4+5-6   当n为负数时，结果肯定为负数,使用加法结合律得出当n为偶数时,结果为(1-2)+(3-4)...(-1)+(-1),规律\n            //当n为2时，结果为一个-1和，当n为4时，结果为2个-1的和,由此得出此结果的规律为(-1)*(n/2)\n\n            //当n为奇数的时候，当n为1时，结果为1，当n为3时候,结果为2,当n为5时候,结果为3...\n            //由此得出规律应该为：(-1)*(n/2)+n =-n/2+n   或者 (n+1)/2\n            //>>(右移)\n            //操作数每右移一位，相当于该数除以2\n\n            System.out.println(\"error\");\n            return 0;\n        }\n        if(0==n%2)\n            return (n>>1)*(-1);\n        else{\n            System.out.println(\"aaa\");\n            return (n>>1)*(-1)+n;   //或者可以替换为(n+1)>>1;\n        }\n\n    }\n```\n### char类型的取值范围：\n0-2<sup>16</sup>-1\n\n### Java中如何在线程中返回一个值？\n答案：可以让这个类去实现Callable接口，然后定义私有变量进行传递即可：如，\n```\npackage com.pff;\n\nimport java.util.concurrent.Callable;\n\n/**\n * Created by strongant on 16-6-16.\n */\npublic class MutiThread implements Callable<String> {\n    private String str;\n    private int count = 1;\n\n    public MutiThread(String str) {\n        this.str = str;\n    }\n\n    //需要实现的CallAble的Call方法\n    public String call() throws Exception {\n        for (int i = 0; i < this.count; i++) {\n            System.out.println(\"Callable的call()方法打印:\" + this.str + \" \" + i);\n        }\n        return this.str;\n    }\n}\n\n```\n\n测试调用\n```\npackage com.pff;\n\nimport java.util.ArrayList;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\n/**\n * Created by strongant on 16-6-16.\n */\npublic class CallableTest {\n    public static void main(String[] args) {\n        //创建一个线程池\n        ExecutorService exs = Executors.newCachedThreadPool();\n        ArrayList<Future<String>> al = new ArrayList<>();\n        al.add(exs.submit(new MutiThread(\"String0\")));\n        for (Future<String> fs : al) {\n            try {\n                System.out.println(fs.get());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        exs.shutdown();\n        /*第二种方式，使用FutureTask来接收线程的返回值\n        MutiThread task = new MutiThread(\"test\");\n        FutureTask<String> futureTask = new FutureTask<>(task);\n        Thread thread = new Thread(futureTask);\n        thread.start();\n        */\n    }\n}\n\n```\n\n具体流程就是实现Callable<Object>  泛型接口，然后线程类定义私有变量，重写call()方法，并且返回Callable接口声明的泛型类型值即可；\n\n获取的时候使用Future<Object>泛型类去使用Future类的get()方法就可以获取到；\n\n\n\n","source":"_posts/Java面试-一.md","raw":"---\ntitle: Java面试(一)\ndate: 2017-03-05 00:04:28\ntags: Java面试\n---\n## Java基础\n\n### 抽象类和接口的区别？\n1. 抽象类中可以包含抽象方法和非抽象方法，接口只能包含公开的抽象方法；\n2. 抽象类中的变量是各种类型的，而接口只能包含public abstract final 类型；\n3. 接口中不能含有静态代码块和静态方法，而抽象类中可以包含；\n4. 一个类只能继承一个抽象类，但是可以实现多个接口；\n5. 抽象类可以有构造方法，接口不能有；\n\n### HashMap和HashTable的区别？\n* HashTable是基于陈旧的Dictionary的Map接口的实现，而HashMap是基于哈希表的Map接口的实现\n* 从方法上看，HashMap去掉了HashTable的contains方法\n* HashTable是同步的（线程安全），而HashMap是线程不安全的，效率上HashMap更快\n* HashMap允许空键值，HashTable不允许，可以查看HashTable的实现源码：\n```\n...\npublic synchronized V put(K key, V value) {\n    // Make sure the value is not null\n    if (value == null) {\n        throw new NullPointerException();\n    }\n\n    // Makes sure the key is not already in the hashtable.\n    Entry<?,?> tab[] = table;\n    int hash = key.hashCode();\n    int index = (hash & 0x7FFFFFFF) % tab.length;\n    @SuppressWarnings(\"unchecked\")\n    Entry<K,V> entry = (Entry<K,V>)tab[index];\n    for(; entry != null ; entry = entry.next) {\n        if ((entry.hash == hash) && entry.key.equals(key)) {\n            V old = entry.value;\n            entry.value = value;\n            return old;\n        }\n    }\n\n    addEntry(hash, key, value, index);\n    return null;\n}\n...\n```\n* HashMap的iterator迭代器执行快速失败机制，也就是说在迭代过程中修改集合结构，除非调用迭代器自身的remove方法，否则以其他任何方式的修改都将抛出并发修改异常。而Hashtable返回的Enumeration不是快速失败的。\n\n### Java中如何创建一个新线程？\n1. 实现runable接口并重写run方法；\n2. 继承Thread类重写run方法；\n3. 实现Callable接口，重写call()方法；使用FutureTask类包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值；\n使用FutureTask对象作为Thread对象的target创建并启动线程，调用FutureTask对象的get()方法获得子线程执行结束后的返回值；\n\n### 什么是AIDL？\n* AIDL全称Android Interface Definition Language（AndRoid接口描述语言）是一种借口描述语言;\n* 编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程跨界对象访问的目的.AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。\n* AIDL支持的数据类型有Stirng，list，map，All native java datatype\n\n### 求计算1-2+3-4+5-6...的方法，n很大，考虑性能？\n```\npublic static  long fn(long n)\n    {\n        if(n<=0)\n        {\n            //1-2+3-4+5-6   当n为负数时，结果肯定为负数,使用加法结合律得出当n为偶数时,结果为(1-2)+(3-4)...(-1)+(-1),规律\n            //当n为2时，结果为一个-1和，当n为4时，结果为2个-1的和,由此得出此结果的规律为(-1)*(n/2)\n\n            //当n为奇数的时候，当n为1时，结果为1，当n为3时候,结果为2,当n为5时候,结果为3...\n            //由此得出规律应该为：(-1)*(n/2)+n =-n/2+n   或者 (n+1)/2\n            //>>(右移)\n            //操作数每右移一位，相当于该数除以2\n\n            System.out.println(\"error\");\n            return 0;\n        }\n        if(0==n%2)\n            return (n>>1)*(-1);\n        else{\n            System.out.println(\"aaa\");\n            return (n>>1)*(-1)+n;   //或者可以替换为(n+1)>>1;\n        }\n\n    }\n```\n### char类型的取值范围：\n0-2<sup>16</sup>-1\n\n### Java中如何在线程中返回一个值？\n答案：可以让这个类去实现Callable接口，然后定义私有变量进行传递即可：如，\n```\npackage com.pff;\n\nimport java.util.concurrent.Callable;\n\n/**\n * Created by strongant on 16-6-16.\n */\npublic class MutiThread implements Callable<String> {\n    private String str;\n    private int count = 1;\n\n    public MutiThread(String str) {\n        this.str = str;\n    }\n\n    //需要实现的CallAble的Call方法\n    public String call() throws Exception {\n        for (int i = 0; i < this.count; i++) {\n            System.out.println(\"Callable的call()方法打印:\" + this.str + \" \" + i);\n        }\n        return this.str;\n    }\n}\n\n```\n\n测试调用\n```\npackage com.pff;\n\nimport java.util.ArrayList;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\n/**\n * Created by strongant on 16-6-16.\n */\npublic class CallableTest {\n    public static void main(String[] args) {\n        //创建一个线程池\n        ExecutorService exs = Executors.newCachedThreadPool();\n        ArrayList<Future<String>> al = new ArrayList<>();\n        al.add(exs.submit(new MutiThread(\"String0\")));\n        for (Future<String> fs : al) {\n            try {\n                System.out.println(fs.get());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        exs.shutdown();\n        /*第二种方式，使用FutureTask来接收线程的返回值\n        MutiThread task = new MutiThread(\"test\");\n        FutureTask<String> futureTask = new FutureTask<>(task);\n        Thread thread = new Thread(futureTask);\n        thread.start();\n        */\n    }\n}\n\n```\n\n具体流程就是实现Callable<Object>  泛型接口，然后线程类定义私有变量，重写call()方法，并且返回Callable接口声明的泛型类型值即可；\n\n获取的时候使用Future<Object>泛型类去使用Future类的get()方法就可以获取到；\n\n\n\n","slug":"Java面试-一","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43b40004ubo7jn5al8vn","content":"<h2 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h2><h3 id=\"抽象类和接口的区别？\"><a href=\"#抽象类和接口的区别？\" class=\"headerlink\" title=\"抽象类和接口的区别？\"></a>抽象类和接口的区别？</h3><ol>\n<li>抽象类中可以包含抽象方法和非抽象方法，接口只能包含公开的抽象方法；</li>\n<li>抽象类中的变量是各种类型的，而接口只能包含public abstract final 类型；</li>\n<li>接口中不能含有静态代码块和静态方法，而抽象类中可以包含；</li>\n<li>一个类只能继承一个抽象类，但是可以实现多个接口；</li>\n<li>抽象类可以有构造方法，接口不能有；</li>\n</ol>\n<h3 id=\"HashMap和HashTable的区别？\"><a href=\"#HashMap和HashTable的区别？\" class=\"headerlink\" title=\"HashMap和HashTable的区别？\"></a>HashMap和HashTable的区别？</h3><ul>\n<li>HashTable是基于陈旧的Dictionary的Map接口的实现，而HashMap是基于哈希表的Map接口的实现</li>\n<li>从方法上看，HashMap去掉了HashTable的contains方法</li>\n<li>HashTable是同步的（线程安全），而HashMap是线程不安全的，效率上HashMap更快</li>\n<li><p>HashMap允许空键值，HashTable不允许，可以查看HashTable的实现源码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">public synchronized V put(K key, V value) &#123;</div><div class=\"line\">    // Make sure the value is not null</div><div class=\"line\">    if (value == null) &#123;</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Makes sure the key is not already in the hashtable.</div><div class=\"line\">    Entry&lt;?,?&gt; tab[] = table;</div><div class=\"line\">    int hash = key.hashCode();</div><div class=\"line\">    int index = (hash &amp; 0x7FFFFFFF) % tab.length;</div><div class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</div><div class=\"line\">    for(; entry != null ; entry = entry.next) &#123;</div><div class=\"line\">        if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</div><div class=\"line\">            V old = entry.value;</div><div class=\"line\">            entry.value = value;</div><div class=\"line\">            return old;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addEntry(hash, key, value, index);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>HashMap的iterator迭代器执行快速失败机制，也就是说在迭代过程中修改集合结构，除非调用迭代器自身的remove方法，否则以其他任何方式的修改都将抛出并发修改异常。而Hashtable返回的Enumeration不是快速失败的。</p>\n</li>\n</ul>\n<h3 id=\"Java中如何创建一个新线程？\"><a href=\"#Java中如何创建一个新线程？\" class=\"headerlink\" title=\"Java中如何创建一个新线程？\"></a>Java中如何创建一个新线程？</h3><ol>\n<li>实现runable接口并重写run方法；</li>\n<li>继承Thread类重写run方法；</li>\n<li>实现Callable接口，重写call()方法；使用FutureTask类包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值；<br>使用FutureTask对象作为Thread对象的target创建并启动线程，调用FutureTask对象的get()方法获得子线程执行结束后的返回值；</li>\n</ol>\n<h3 id=\"什么是AIDL？\"><a href=\"#什么是AIDL？\" class=\"headerlink\" title=\"什么是AIDL？\"></a>什么是AIDL？</h3><ul>\n<li>AIDL全称Android Interface Definition Language（AndRoid接口描述语言）是一种借口描述语言;</li>\n<li>编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程跨界对象访问的目的.AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。</li>\n<li>AIDL支持的数据类型有Stirng，list，map，All native java datatype</li>\n</ul>\n<h3 id=\"求计算1-2-3-4-5-6…的方法，n很大，考虑性能？\"><a href=\"#求计算1-2-3-4-5-6…的方法，n很大，考虑性能？\" class=\"headerlink\" title=\"求计算1-2+3-4+5-6…的方法，n很大，考虑性能？\"></a>求计算1-2+3-4+5-6…的方法，n很大，考虑性能？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static  long fn(long n)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if(n&lt;=0)</div><div class=\"line\">        &#123;</div><div class=\"line\">            //1-2+3-4+5-6   当n为负数时，结果肯定为负数,使用加法结合律得出当n为偶数时,结果为(1-2)+(3-4)...(-1)+(-1),规律</div><div class=\"line\">            //当n为2时，结果为一个-1和，当n为4时，结果为2个-1的和,由此得出此结果的规律为(-1)*(n/2)</div><div class=\"line\"></div><div class=\"line\">            //当n为奇数的时候，当n为1时，结果为1，当n为3时候,结果为2,当n为5时候,结果为3...</div><div class=\"line\">            //由此得出规律应该为：(-1)*(n/2)+n =-n/2+n   或者 (n+1)/2</div><div class=\"line\">            //&gt;&gt;(右移)</div><div class=\"line\">            //操作数每右移一位，相当于该数除以2</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;error&quot;);</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(0==n%2)</div><div class=\"line\">            return (n&gt;&gt;1)*(-1);</div><div class=\"line\">        else&#123;</div><div class=\"line\">            System.out.println(&quot;aaa&quot;);</div><div class=\"line\">            return (n&gt;&gt;1)*(-1)+n;   //或者可以替换为(n+1)&gt;&gt;1;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"char类型的取值范围：\"><a href=\"#char类型的取值范围：\" class=\"headerlink\" title=\"char类型的取值范围：\"></a>char类型的取值范围：</h3><p>0-2<sup>16</sup>-1</p>\n<h3 id=\"Java中如何在线程中返回一个值？\"><a href=\"#Java中如何在线程中返回一个值？\" class=\"headerlink\" title=\"Java中如何在线程中返回一个值？\"></a>Java中如何在线程中返回一个值？</h3><p>答案：可以让这个类去实现Callable接口，然后定义私有变量进行传递即可：如，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.pff;</div><div class=\"line\"></div><div class=\"line\">import java.util.concurrent.Callable;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by strongant on 16-6-16.</div><div class=\"line\"> */</div><div class=\"line\">public class MutiThread implements Callable&lt;String&gt; &#123;</div><div class=\"line\">    private String str;</div><div class=\"line\">    private int count = 1;</div><div class=\"line\"></div><div class=\"line\">    public MutiThread(String str) &#123;</div><div class=\"line\">        this.str = str;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //需要实现的CallAble的Call方法</div><div class=\"line\">    public String call() throws Exception &#123;</div><div class=\"line\">        for (int i = 0; i &lt; this.count; i++) &#123;</div><div class=\"line\">            System.out.println(&quot;Callable的call()方法打印:&quot; + this.str + &quot; &quot; + i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return this.str;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.pff;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\">import java.util.concurrent.Future;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by strongant on 16-6-16.</div><div class=\"line\"> */</div><div class=\"line\">public class CallableTest &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //创建一个线程池</div><div class=\"line\">        ExecutorService exs = Executors.newCachedThreadPool();</div><div class=\"line\">        ArrayList&lt;Future&lt;String&gt;&gt; al = new ArrayList&lt;&gt;();</div><div class=\"line\">        al.add(exs.submit(new MutiThread(&quot;String0&quot;)));</div><div class=\"line\">        for (Future&lt;String&gt; fs : al) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                System.out.println(fs.get());</div><div class=\"line\">            &#125; catch (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        exs.shutdown();</div><div class=\"line\">        /*第二种方式，使用FutureTask来接收线程的返回值</div><div class=\"line\">        MutiThread task = new MutiThread(&quot;test&quot;);</div><div class=\"line\">        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(task);</div><div class=\"line\">        Thread thread = new Thread(futureTask);</div><div class=\"line\">        thread.start();</div><div class=\"line\">        */</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>具体流程就是实现Callable<object>  泛型接口，然后线程类定义私有变量，重写call()方法，并且返回Callable接口声明的泛型类型值即可；</object></p>\n<p>获取的时候使用Future<object>泛型类去使用Future类的get()方法就可以获取到；</object></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h2><h3 id=\"抽象类和接口的区别？\"><a href=\"#抽象类和接口的区别？\" class=\"headerlink\" title=\"抽象类和接口的区别？\"></a>抽象类和接口的区别？</h3><ol>\n<li>抽象类中可以包含抽象方法和非抽象方法，接口只能包含公开的抽象方法；</li>\n<li>抽象类中的变量是各种类型的，而接口只能包含public abstract final 类型；</li>\n<li>接口中不能含有静态代码块和静态方法，而抽象类中可以包含；</li>\n<li>一个类只能继承一个抽象类，但是可以实现多个接口；</li>\n<li>抽象类可以有构造方法，接口不能有；</li>\n</ol>\n<h3 id=\"HashMap和HashTable的区别？\"><a href=\"#HashMap和HashTable的区别？\" class=\"headerlink\" title=\"HashMap和HashTable的区别？\"></a>HashMap和HashTable的区别？</h3><ul>\n<li>HashTable是基于陈旧的Dictionary的Map接口的实现，而HashMap是基于哈希表的Map接口的实现</li>\n<li>从方法上看，HashMap去掉了HashTable的contains方法</li>\n<li>HashTable是同步的（线程安全），而HashMap是线程不安全的，效率上HashMap更快</li>\n<li><p>HashMap允许空键值，HashTable不允许，可以查看HashTable的实现源码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">public synchronized V put(K key, V value) &#123;</div><div class=\"line\">    // Make sure the value is not null</div><div class=\"line\">    if (value == null) &#123;</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Makes sure the key is not already in the hashtable.</div><div class=\"line\">    Entry&lt;?,?&gt; tab[] = table;</div><div class=\"line\">    int hash = key.hashCode();</div><div class=\"line\">    int index = (hash &amp; 0x7FFFFFFF) % tab.length;</div><div class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</div><div class=\"line\">    for(; entry != null ; entry = entry.next) &#123;</div><div class=\"line\">        if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</div><div class=\"line\">            V old = entry.value;</div><div class=\"line\">            entry.value = value;</div><div class=\"line\">            return old;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addEntry(hash, key, value, index);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>HashMap的iterator迭代器执行快速失败机制，也就是说在迭代过程中修改集合结构，除非调用迭代器自身的remove方法，否则以其他任何方式的修改都将抛出并发修改异常。而Hashtable返回的Enumeration不是快速失败的。</p>\n</li>\n</ul>\n<h3 id=\"Java中如何创建一个新线程？\"><a href=\"#Java中如何创建一个新线程？\" class=\"headerlink\" title=\"Java中如何创建一个新线程？\"></a>Java中如何创建一个新线程？</h3><ol>\n<li>实现runable接口并重写run方法；</li>\n<li>继承Thread类重写run方法；</li>\n<li>实现Callable接口，重写call()方法；使用FutureTask类包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值；<br>使用FutureTask对象作为Thread对象的target创建并启动线程，调用FutureTask对象的get()方法获得子线程执行结束后的返回值；</li>\n</ol>\n<h3 id=\"什么是AIDL？\"><a href=\"#什么是AIDL？\" class=\"headerlink\" title=\"什么是AIDL？\"></a>什么是AIDL？</h3><ul>\n<li>AIDL全称Android Interface Definition Language（AndRoid接口描述语言）是一种借口描述语言;</li>\n<li>编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程跨界对象访问的目的.AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。</li>\n<li>AIDL支持的数据类型有Stirng，list，map，All native java datatype</li>\n</ul>\n<h3 id=\"求计算1-2-3-4-5-6…的方法，n很大，考虑性能？\"><a href=\"#求计算1-2-3-4-5-6…的方法，n很大，考虑性能？\" class=\"headerlink\" title=\"求计算1-2+3-4+5-6…的方法，n很大，考虑性能？\"></a>求计算1-2+3-4+5-6…的方法，n很大，考虑性能？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static  long fn(long n)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if(n&lt;=0)</div><div class=\"line\">        &#123;</div><div class=\"line\">            //1-2+3-4+5-6   当n为负数时，结果肯定为负数,使用加法结合律得出当n为偶数时,结果为(1-2)+(3-4)...(-1)+(-1),规律</div><div class=\"line\">            //当n为2时，结果为一个-1和，当n为4时，结果为2个-1的和,由此得出此结果的规律为(-1)*(n/2)</div><div class=\"line\"></div><div class=\"line\">            //当n为奇数的时候，当n为1时，结果为1，当n为3时候,结果为2,当n为5时候,结果为3...</div><div class=\"line\">            //由此得出规律应该为：(-1)*(n/2)+n =-n/2+n   或者 (n+1)/2</div><div class=\"line\">            //&gt;&gt;(右移)</div><div class=\"line\">            //操作数每右移一位，相当于该数除以2</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;error&quot;);</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(0==n%2)</div><div class=\"line\">            return (n&gt;&gt;1)*(-1);</div><div class=\"line\">        else&#123;</div><div class=\"line\">            System.out.println(&quot;aaa&quot;);</div><div class=\"line\">            return (n&gt;&gt;1)*(-1)+n;   //或者可以替换为(n+1)&gt;&gt;1;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"char类型的取值范围：\"><a href=\"#char类型的取值范围：\" class=\"headerlink\" title=\"char类型的取值范围：\"></a>char类型的取值范围：</h3><p>0-2<sup>16</sup>-1</p>\n<h3 id=\"Java中如何在线程中返回一个值？\"><a href=\"#Java中如何在线程中返回一个值？\" class=\"headerlink\" title=\"Java中如何在线程中返回一个值？\"></a>Java中如何在线程中返回一个值？</h3><p>答案：可以让这个类去实现Callable接口，然后定义私有变量进行传递即可：如，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.pff;</div><div class=\"line\"></div><div class=\"line\">import java.util.concurrent.Callable;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by strongant on 16-6-16.</div><div class=\"line\"> */</div><div class=\"line\">public class MutiThread implements Callable&lt;String&gt; &#123;</div><div class=\"line\">    private String str;</div><div class=\"line\">    private int count = 1;</div><div class=\"line\"></div><div class=\"line\">    public MutiThread(String str) &#123;</div><div class=\"line\">        this.str = str;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //需要实现的CallAble的Call方法</div><div class=\"line\">    public String call() throws Exception &#123;</div><div class=\"line\">        for (int i = 0; i &lt; this.count; i++) &#123;</div><div class=\"line\">            System.out.println(&quot;Callable的call()方法打印:&quot; + this.str + &quot; &quot; + i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return this.str;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.pff;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\">import java.util.concurrent.Future;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by strongant on 16-6-16.</div><div class=\"line\"> */</div><div class=\"line\">public class CallableTest &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //创建一个线程池</div><div class=\"line\">        ExecutorService exs = Executors.newCachedThreadPool();</div><div class=\"line\">        ArrayList&lt;Future&lt;String&gt;&gt; al = new ArrayList&lt;&gt;();</div><div class=\"line\">        al.add(exs.submit(new MutiThread(&quot;String0&quot;)));</div><div class=\"line\">        for (Future&lt;String&gt; fs : al) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                System.out.println(fs.get());</div><div class=\"line\">            &#125; catch (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        exs.shutdown();</div><div class=\"line\">        /*第二种方式，使用FutureTask来接收线程的返回值</div><div class=\"line\">        MutiThread task = new MutiThread(&quot;test&quot;);</div><div class=\"line\">        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(task);</div><div class=\"line\">        Thread thread = new Thread(futureTask);</div><div class=\"line\">        thread.start();</div><div class=\"line\">        */</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>具体流程就是实现Callable<object>  泛型接口，然后线程类定义私有变量，重写call()方法，并且返回Callable接口声明的泛型类型值即可；</object></p>\n<p>获取的时候使用Future<object>泛型类去使用Future类的get()方法就可以获取到；</object></p>\n"},{"title":"hexo将多说替换为畅言","date":"2017-05-30T02:46:11.000Z","reward":true,"_content":"\n** 由于多说团队在2017年6月1号停止了对多说的运营，因此需要将博客中使用的多说替换为畅言。 **\n\n### 具体替换办法如下：\n1. 如果你没有畅言的账号，则首先去畅言的官网进行注册账号：\n畅言网址: http://changyan.kuaizhan.com/\n\n![](/images/reg_changyan.png)\n\n2. 如果你已经注册过畅言的账号了，那么请直接登录即可；\n3. 注册登录成功之后，点击进入后台，如图,可以看到已经有APP ID和APP KEY，这两个字符串，等会在配置的时候需要：\n\n![](/images/login-changyan.png)\n\n4. 由于我使用的是hexo的Yilia主题，这里以Yilia主题为主，进行下面的配置，其他主题类似。\n在畅言后台找到** 安装畅言 ** 点击展开之后，点击 ** 通用代码安装 **，然后点击右边的复制代码，如图：\n\n![](/images/copy-config.png)\n\n5. 然后编辑你hexo目录下的themes/yilia/layout/_partial/post/duoshuo.ejs文件，将duoshuo.ejs中原来的内容全部删除，使用刚才拷贝的代码替换，替换后的样例如下：\n```\n<!-- 畅言评论框 start -->\n<div id=\"SOHUCS\" sid=\"<%=title %>\" style=\"padding: 0px 30px 0px 46px;\"></div>\n<!-- 畅言评论框 end -->\n<script type=\"text/javascript\"> \n(function(){ \nvar appid = '你的appid'; \nvar conf = '你的app key'; \nvar width = window.innerWidth || document.documentElement.clientWidth; \nif (width < 960) { \nwindow.document.write('<script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '\"><\\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"https://changyan.sohu.com/upload/changyan.js\",function(){window.changyan.api.config({appid:appid,conf:conf})}); } })(); </script>\n```\n6. 然后就可以使用畅言了\n7. 由于我的域名已经备案，没有遇到网上说的不能正常加载畅言的方式，如果你的域名没有备案，具体Hacker方法，请参考：<http://ev1l.cn/2017/05/13/changyancrack/>\n\n** 注意： ** 如果你在配置中还有其他问题，欢迎打赏提问，我收到之后会快速帮你解决！\n\n\n","source":"_posts/hexo将多说替换为畅言.md","raw":"title: hexo将多说替换为畅言\ndate: 2017-05-30 10:46:11\ntags: [Tools]\ncategories: [Tools]\nreward: true\n---\n\n** 由于多说团队在2017年6月1号停止了对多说的运营，因此需要将博客中使用的多说替换为畅言。 **\n\n### 具体替换办法如下：\n1. 如果你没有畅言的账号，则首先去畅言的官网进行注册账号：\n畅言网址: http://changyan.kuaizhan.com/\n\n![](/images/reg_changyan.png)\n\n2. 如果你已经注册过畅言的账号了，那么请直接登录即可；\n3. 注册登录成功之后，点击进入后台，如图,可以看到已经有APP ID和APP KEY，这两个字符串，等会在配置的时候需要：\n\n![](/images/login-changyan.png)\n\n4. 由于我使用的是hexo的Yilia主题，这里以Yilia主题为主，进行下面的配置，其他主题类似。\n在畅言后台找到** 安装畅言 ** 点击展开之后，点击 ** 通用代码安装 **，然后点击右边的复制代码，如图：\n\n![](/images/copy-config.png)\n\n5. 然后编辑你hexo目录下的themes/yilia/layout/_partial/post/duoshuo.ejs文件，将duoshuo.ejs中原来的内容全部删除，使用刚才拷贝的代码替换，替换后的样例如下：\n```\n<!-- 畅言评论框 start -->\n<div id=\"SOHUCS\" sid=\"<%=title %>\" style=\"padding: 0px 30px 0px 46px;\"></div>\n<!-- 畅言评论框 end -->\n<script type=\"text/javascript\"> \n(function(){ \nvar appid = '你的appid'; \nvar conf = '你的app key'; \nvar width = window.innerWidth || document.documentElement.clientWidth; \nif (width < 960) { \nwindow.document.write('<script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '\"><\\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"https://changyan.sohu.com/upload/changyan.js\",function(){window.changyan.api.config({appid:appid,conf:conf})}); } })(); </script>\n```\n6. 然后就可以使用畅言了\n7. 由于我的域名已经备案，没有遇到网上说的不能正常加载畅言的方式，如果你的域名没有备案，具体Hacker方法，请参考：<http://ev1l.cn/2017/05/13/changyancrack/>\n\n** 注意： ** 如果你在配置中还有其他问题，欢迎打赏提问，我收到之后会快速帮你解决！\n\n\n","slug":"hexo将多说替换为畅言","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43b70005ubo7958i63xj","content":"<p><strong> 由于多说团队在2017年6月1号停止了对多说的运营，因此需要将博客中使用的多说替换为畅言。 </strong></p>\n<h3 id=\"具体替换办法如下：\"><a href=\"#具体替换办法如下：\" class=\"headerlink\" title=\"具体替换办法如下：\"></a>具体替换办法如下：</h3><ol>\n<li>如果你没有畅言的账号，则首先去畅言的官网进行注册账号：<br>畅言网址: <a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"external\">http://changyan.kuaizhan.com/</a></li>\n</ol>\n<p><img src=\"/images/reg_changyan.png\" alt=\"\"></p>\n<ol>\n<li>如果你已经注册过畅言的账号了，那么请直接登录即可；</li>\n<li>注册登录成功之后，点击进入后台，如图,可以看到已经有APP ID和APP KEY，这两个字符串，等会在配置的时候需要：</li>\n</ol>\n<p><img src=\"/images/login-changyan.png\" alt=\"\"></p>\n<ol>\n<li>由于我使用的是hexo的Yilia主题，这里以Yilia主题为主，进行下面的配置，其他主题类似。<br>在畅言后台找到<strong> 安装畅言 </strong> 点击展开之后，点击 <strong> 通用代码安装 </strong>，然后点击右边的复制代码，如图：</li>\n</ol>\n<p><img src=\"/images/copy-config.png\" alt=\"\"></p>\n<ol>\n<li><p>然后编辑你hexo目录下的themes/yilia/layout/_partial/post/duoshuo.ejs文件，将duoshuo.ejs中原来的内容全部删除，使用刚才拷贝的代码替换，替换后的样例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 畅言评论框 start --&gt;</div><div class=\"line\">&lt;div id=&quot;SOHUCS&quot; sid=&quot;&lt;%=title %&gt;&quot; style=&quot;padding: 0px 30px 0px 46px;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;!-- 畅言评论框 end --&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt; </div><div class=\"line\">(function()&#123; </div><div class=\"line\">var appid = &apos;你的appid&apos;; </div><div class=\"line\">var conf = &apos;你的app key&apos;; </div><div class=\"line\">var width = window.innerWidth || document.documentElement.clientWidth; </div><div class=\"line\">if (width &lt; 960) &#123; </div><div class=\"line\">window.document.write(&apos;&lt;script id=&quot;changyan_mobile_js&quot; charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=&apos; + appid + &apos;&amp;conf=&apos; + conf + &apos;&quot;&gt;&lt;\\/script&gt;&apos;); &#125; else &#123; var loadJs=function(d,a)&#123;var c=document.getElementsByTagName(&quot;head&quot;)[0]||document.head||document.documentElement;var b=document.createElement(&quot;script&quot;);b.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);b.setAttribute(&quot;charset&quot;,&quot;UTF-8&quot;);b.setAttribute(&quot;src&quot;,d);if(typeof a===&quot;function&quot;)&#123;if(window.attachEvent)&#123;b.onreadystatechange=function()&#123;var e=b.readyState;if(e===&quot;loaded&quot;||e===&quot;complete&quot;)&#123;b.onreadystatechange=null;a()&#125;&#125;&#125;else&#123;b.onload=a&#125;&#125;c.appendChild(b)&#125;;loadJs(&quot;https://changyan.sohu.com/upload/changyan.js&quot;,function()&#123;window.changyan.api.config(&#123;appid:appid,conf:conf&#125;)&#125;); &#125; &#125;)(); &lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以使用畅言了</p>\n</li>\n<li>由于我的域名已经备案，没有遇到网上说的不能正常加载畅言的方式，如果你的域名没有备案，具体Hacker方法，请参考：<a href=\"http://ev1l.cn/2017/05/13/changyancrack/\" target=\"_blank\" rel=\"external\">http://ev1l.cn/2017/05/13/changyancrack/</a></li>\n</ol>\n<p><strong> 注意： </strong> 如果你在配置中还有其他问题，欢迎打赏提问，我收到之后会快速帮你解决！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong> 由于多说团队在2017年6月1号停止了对多说的运营，因此需要将博客中使用的多说替换为畅言。 </strong></p>\n<h3 id=\"具体替换办法如下：\"><a href=\"#具体替换办法如下：\" class=\"headerlink\" title=\"具体替换办法如下：\"></a>具体替换办法如下：</h3><ol>\n<li>如果你没有畅言的账号，则首先去畅言的官网进行注册账号：<br>畅言网址: <a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"external\">http://changyan.kuaizhan.com/</a></li>\n</ol>\n<p><img src=\"/images/reg_changyan.png\" alt=\"\"></p>\n<ol>\n<li>如果你已经注册过畅言的账号了，那么请直接登录即可；</li>\n<li>注册登录成功之后，点击进入后台，如图,可以看到已经有APP ID和APP KEY，这两个字符串，等会在配置的时候需要：</li>\n</ol>\n<p><img src=\"/images/login-changyan.png\" alt=\"\"></p>\n<ol>\n<li>由于我使用的是hexo的Yilia主题，这里以Yilia主题为主，进行下面的配置，其他主题类似。<br>在畅言后台找到<strong> 安装畅言 </strong> 点击展开之后，点击 <strong> 通用代码安装 </strong>，然后点击右边的复制代码，如图：</li>\n</ol>\n<p><img src=\"/images/copy-config.png\" alt=\"\"></p>\n<ol>\n<li><p>然后编辑你hexo目录下的themes/yilia/layout/_partial/post/duoshuo.ejs文件，将duoshuo.ejs中原来的内容全部删除，使用刚才拷贝的代码替换，替换后的样例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 畅言评论框 start --&gt;</div><div class=\"line\">&lt;div id=&quot;SOHUCS&quot; sid=&quot;&lt;%=title %&gt;&quot; style=&quot;padding: 0px 30px 0px 46px;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;!-- 畅言评论框 end --&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt; </div><div class=\"line\">(function()&#123; </div><div class=\"line\">var appid = &apos;你的appid&apos;; </div><div class=\"line\">var conf = &apos;你的app key&apos;; </div><div class=\"line\">var width = window.innerWidth || document.documentElement.clientWidth; </div><div class=\"line\">if (width &lt; 960) &#123; </div><div class=\"line\">window.document.write(&apos;&lt;script id=&quot;changyan_mobile_js&quot; charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=&apos; + appid + &apos;&amp;conf=&apos; + conf + &apos;&quot;&gt;&lt;\\/script&gt;&apos;); &#125; else &#123; var loadJs=function(d,a)&#123;var c=document.getElementsByTagName(&quot;head&quot;)[0]||document.head||document.documentElement;var b=document.createElement(&quot;script&quot;);b.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);b.setAttribute(&quot;charset&quot;,&quot;UTF-8&quot;);b.setAttribute(&quot;src&quot;,d);if(typeof a===&quot;function&quot;)&#123;if(window.attachEvent)&#123;b.onreadystatechange=function()&#123;var e=b.readyState;if(e===&quot;loaded&quot;||e===&quot;complete&quot;)&#123;b.onreadystatechange=null;a()&#125;&#125;&#125;else&#123;b.onload=a&#125;&#125;c.appendChild(b)&#125;;loadJs(&quot;https://changyan.sohu.com/upload/changyan.js&quot;,function()&#123;window.changyan.api.config(&#123;appid:appid,conf:conf&#125;)&#125;); &#125; &#125;)(); &lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以使用畅言了</p>\n</li>\n<li>由于我的域名已经备案，没有遇到网上说的不能正常加载畅言的方式，如果你的域名没有备案，具体Hacker方法，请参考：<a href=\"http://ev1l.cn/2017/05/13/changyancrack/\" target=\"_blank\" rel=\"external\">http://ev1l.cn/2017/05/13/changyancrack/</a></li>\n</ol>\n<p><strong> 注意： </strong> 如果你在配置中还有其他问题，欢迎打赏提问，我收到之后会快速帮你解决！</p>\n"},{"title":"hexo搭建成功","date":"2017-01-19T15:20:52.000Z","_content":"终于折腾完了，搭建好我的hexo，的确挺方便的！感谢前人的贡献！\n","source":"_posts/hexo搭建成功.md","raw":"---\ntitle: hexo搭建成功\ndate: 2017-01-19 23:20:52\ntags:\n---\n终于折腾完了，搭建好我的hexo，的确挺方便的！感谢前人的贡献！\n","slug":"hexo搭建成功","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43b90008ubo7tley4beu","content":"<p>终于折腾完了，搭建好我的hexo，的确挺方便的！感谢前人的贡献！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于折腾完了，搭建好我的hexo，的确挺方便的！感谢前人的贡献！</p>\n"},{"title":"rxjs翻译-rxjs介绍","date":"2017-01-22T13:26:40.000Z","reward":true,"_content":"# 介绍\n\nRxJS是一个基于可观察对象(Observable)序列，用于异步或者事件编程的库。它提供一个核心类型，[Observable]('./overview.html#observable') ，几个卫星类型（Observer, Schedulers, Subjects）以及一些由[Array#extras](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6) (map, filter, reduce, every等)激发的，让异步事件可以以集合的方式被处理的运算子(Operators)。\n\n<span class=\"informal\">可以将RxJS想象成是用于处理事件的Lodash.</span>\n\nReactiveX将[Observer模式](https://en.wikipedia.org/wiki/Observer_pattern)和[Iterator模式](https://en.wikipedia.org/wiki/Iterator_pattern)和对集合进行函数式编程结合起来，从而满足了对事件序列进行管理的需求。\n\nRxJS用于解决异步事件的管理问题，它的核心概念如下：\n\n- **Observable:** 代表数据与事件的集合，这个集合可以被调用，从而可以生成数据和事件。\n- **Observer:** 回调函数的集合，用于获取想要数据。这些数据来自于Observable。\n- **Subscription:** 用于表示Observable的执行状态，主要用于执行的取消。\n- **Operator:** 函数式风格的纯函数，通过`map`, `filter`, `concat`, `flatMap`等操作对集合进行处理。\n- **Subject:** 与EventEmitter等价，唯一可以将一个值或者事件向个多个Observer进行广播的办法。\n- **Schedulers:** 一个中心化的、控制并发的分发器，允许我们可以在象`setTimeout`、`requestAnimationFrame`或者其它类似的计算中可以进行调整。\n\n\n## 第一个例子\n\n通常你是这样注册事件的侦听器(listener)的。\n```js\nvar button = document.querySelector('button');\nbutton.addEventListener('click', () => console.log('Clicked!'));\n```\n使用RxJS的话，你要创建一个Observable来替换。\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .subscribe(() => console.log('Clicked!'));\n```\n\n\n### 纯粹(Purity)\n\n让RxJS强大的是它能完全通过函数来生成数值，这也就意味着可以减少代码出错的机会。\n\n通常你会创建比较不纯粹的函数，在这样的函数里，其它的代码片段会让你的状态变的混乱。\n\n```js\nvar count = 0;\nvar button = document.querySelector('button');\nbutton.addEventListener('click', () => console.log(`Clicked ${++count} times`));\n```\n\n而使用RxJS可以将你的状态进行隔离。\n\n> 译者注： 指count不再需要定义在外面。\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .scan(count => count + 1, 0)\n  .subscribe(count => console.log(`Clicked ${count} times`));\n```\n\n这里**scan**运算子的工作方式与**reduce**在数组里的工作方式是一样的。它从传给回调函数的值中获取值。返回的值将会作为下一次的传入值。\n\n> 译者注：scan第二个参数0是初始值。对于上面的函数来说就可以用来侦听被点击的次数了，非常的方便。\n\n\n### 流转（Flow）\n\nRxJS有一堆的运算子可以帮助你控制事件如何在你的可观察对象里流转。\n\n下面是你在纯JavaScript下允许一分钟最多一次点击的代码：\n\n```js\nvar count = 0;\nvar rate = 1000;\nvar lastClick = Date.now() - rate;\nvar button = document.querySelector('button');\nbutton.addEventListener('click', () => {\n  if (Date.now() - lastClick >= rate) {\n    console.log(`Clicked ${++count} times`);\n    lastClick = Date.now();\n  }\n});\n```\n\n使用RxJS后:\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .throttleTime(1000)\n  .scan(count => count + 1, 0)\n  .subscribe(count => console.log(`Clicked ${count} times`));\n```\n\n其实的流转控制运算子还有[**filter**](../class/es6/Observable.js~Observable.html#instance-method-filter), [**delay**](../class/es6/Observable.js~Observable.html#instance-method-delay), [**debounceTime**](../class/es6/Observable.js~Observable.html#instance-method-debounceTime), [**take**](../class/es6/Observable.js~Observable.html#instance-method-take), [**takeUntil**](../class/es6/Observable.js~Observable.html#instance-method-takeUntil), [**distinct**](../class/es6/Observable.js~Observable.html#instance-method-distinct), [**distinctUntilChanged**](../class/es6/Observable.js~Observable.html#instance-method-distinctUntilChanged)等。\n\n\n### 值(Values)\n\n你可以转化赋给你的观察者的值。\n\n下面是你在纯JavaScript下添加当前鼠标的每个点击事件的x轴位置的代码：\n\n```js\nvar count = 0;\nvar rate = 1000;\nvar lastClick = Date.now() - rate;\nvar button = document.querySelector('button');\nbutton.addEventListener('click', (event) => {\n  if (Date.now() - lastClick >= rate) {\n    count += event.clientX;\n    console.log(count)\n    lastClick = Date.now();\n  }\n});\n```\n\n使用RxJS后:\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .throttleTime(1000)\n  .map(event => event.clientX)\n  .scan((count, clientX) => count + clientX, 0)\n  .subscribe(count => console.log(count));\n```\n\n另外几个用于生成值的运算子有[**pluck**](../class/es6/Observable.js~Observable.html#instance-method-pluck), [**pairwise**](../class/es6/Observable.js~Observable.html#instance-method-pairwise),\n[**sample**](../class/es6/Observable.js~Observable.html#instance-method-sample)等。\n\n> 译者注：这里map可以将事件里的值取出来，如果不进行map，clientX里的值就是事件本身。\n> 这里要注意的是每次变换，其实对象是发生变化的。subscribe一次之后就不能再subscribe了。\n\n\n","source":"_posts/rxjs翻译-rxjs介绍.md","raw":"---\ntitle: rxjs翻译-rxjs介绍\ndate: 2017-01-22 21:26:40\ntags: rxjs\nreward: true\n---\n# 介绍\n\nRxJS是一个基于可观察对象(Observable)序列，用于异步或者事件编程的库。它提供一个核心类型，[Observable]('./overview.html#observable') ，几个卫星类型（Observer, Schedulers, Subjects）以及一些由[Array#extras](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6) (map, filter, reduce, every等)激发的，让异步事件可以以集合的方式被处理的运算子(Operators)。\n\n<span class=\"informal\">可以将RxJS想象成是用于处理事件的Lodash.</span>\n\nReactiveX将[Observer模式](https://en.wikipedia.org/wiki/Observer_pattern)和[Iterator模式](https://en.wikipedia.org/wiki/Iterator_pattern)和对集合进行函数式编程结合起来，从而满足了对事件序列进行管理的需求。\n\nRxJS用于解决异步事件的管理问题，它的核心概念如下：\n\n- **Observable:** 代表数据与事件的集合，这个集合可以被调用，从而可以生成数据和事件。\n- **Observer:** 回调函数的集合，用于获取想要数据。这些数据来自于Observable。\n- **Subscription:** 用于表示Observable的执行状态，主要用于执行的取消。\n- **Operator:** 函数式风格的纯函数，通过`map`, `filter`, `concat`, `flatMap`等操作对集合进行处理。\n- **Subject:** 与EventEmitter等价，唯一可以将一个值或者事件向个多个Observer进行广播的办法。\n- **Schedulers:** 一个中心化的、控制并发的分发器，允许我们可以在象`setTimeout`、`requestAnimationFrame`或者其它类似的计算中可以进行调整。\n\n\n## 第一个例子\n\n通常你是这样注册事件的侦听器(listener)的。\n```js\nvar button = document.querySelector('button');\nbutton.addEventListener('click', () => console.log('Clicked!'));\n```\n使用RxJS的话，你要创建一个Observable来替换。\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .subscribe(() => console.log('Clicked!'));\n```\n\n\n### 纯粹(Purity)\n\n让RxJS强大的是它能完全通过函数来生成数值，这也就意味着可以减少代码出错的机会。\n\n通常你会创建比较不纯粹的函数，在这样的函数里，其它的代码片段会让你的状态变的混乱。\n\n```js\nvar count = 0;\nvar button = document.querySelector('button');\nbutton.addEventListener('click', () => console.log(`Clicked ${++count} times`));\n```\n\n而使用RxJS可以将你的状态进行隔离。\n\n> 译者注： 指count不再需要定义在外面。\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .scan(count => count + 1, 0)\n  .subscribe(count => console.log(`Clicked ${count} times`));\n```\n\n这里**scan**运算子的工作方式与**reduce**在数组里的工作方式是一样的。它从传给回调函数的值中获取值。返回的值将会作为下一次的传入值。\n\n> 译者注：scan第二个参数0是初始值。对于上面的函数来说就可以用来侦听被点击的次数了，非常的方便。\n\n\n### 流转（Flow）\n\nRxJS有一堆的运算子可以帮助你控制事件如何在你的可观察对象里流转。\n\n下面是你在纯JavaScript下允许一分钟最多一次点击的代码：\n\n```js\nvar count = 0;\nvar rate = 1000;\nvar lastClick = Date.now() - rate;\nvar button = document.querySelector('button');\nbutton.addEventListener('click', () => {\n  if (Date.now() - lastClick >= rate) {\n    console.log(`Clicked ${++count} times`);\n    lastClick = Date.now();\n  }\n});\n```\n\n使用RxJS后:\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .throttleTime(1000)\n  .scan(count => count + 1, 0)\n  .subscribe(count => console.log(`Clicked ${count} times`));\n```\n\n其实的流转控制运算子还有[**filter**](../class/es6/Observable.js~Observable.html#instance-method-filter), [**delay**](../class/es6/Observable.js~Observable.html#instance-method-delay), [**debounceTime**](../class/es6/Observable.js~Observable.html#instance-method-debounceTime), [**take**](../class/es6/Observable.js~Observable.html#instance-method-take), [**takeUntil**](../class/es6/Observable.js~Observable.html#instance-method-takeUntil), [**distinct**](../class/es6/Observable.js~Observable.html#instance-method-distinct), [**distinctUntilChanged**](../class/es6/Observable.js~Observable.html#instance-method-distinctUntilChanged)等。\n\n\n### 值(Values)\n\n你可以转化赋给你的观察者的值。\n\n下面是你在纯JavaScript下添加当前鼠标的每个点击事件的x轴位置的代码：\n\n```js\nvar count = 0;\nvar rate = 1000;\nvar lastClick = Date.now() - rate;\nvar button = document.querySelector('button');\nbutton.addEventListener('click', (event) => {\n  if (Date.now() - lastClick >= rate) {\n    count += event.clientX;\n    console.log(count)\n    lastClick = Date.now();\n  }\n});\n```\n\n使用RxJS后:\n\n```js\nvar button = document.querySelector('button');\nRx.Observable.fromEvent(button, 'click')\n  .throttleTime(1000)\n  .map(event => event.clientX)\n  .scan((count, clientX) => count + clientX, 0)\n  .subscribe(count => console.log(count));\n```\n\n另外几个用于生成值的运算子有[**pluck**](../class/es6/Observable.js~Observable.html#instance-method-pluck), [**pairwise**](../class/es6/Observable.js~Observable.html#instance-method-pairwise),\n[**sample**](../class/es6/Observable.js~Observable.html#instance-method-sample)等。\n\n> 译者注：这里map可以将事件里的值取出来，如果不进行map，clientX里的值就是事件本身。\n> 这里要注意的是每次变换，其实对象是发生变化的。subscribe一次之后就不能再subscribe了。\n\n\n","slug":"rxjs翻译-rxjs介绍","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43bc000aubo7grojhldt","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>RxJS是一个基于可观察对象(Observable)序列，用于异步或者事件编程的库。它提供一个核心类型，<a href=\"&#39;./overview.html#observable&#39;\">Observable</a> ，几个卫星类型（Observer, Schedulers, Subjects）以及一些由<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6\" target=\"_blank\" rel=\"external\">Array#extras</a> (map, filter, reduce, every等)激发的，让异步事件可以以集合的方式被处理的运算子(Operators)。</p>\n<p><span class=\"informal\">可以将RxJS想象成是用于处理事件的Lodash.</span></p>\n<p>ReactiveX将<a href=\"https://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"external\">Observer模式</a>和<a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\" target=\"_blank\" rel=\"external\">Iterator模式</a>和对集合进行函数式编程结合起来，从而满足了对事件序列进行管理的需求。</p>\n<p>RxJS用于解决异步事件的管理问题，它的核心概念如下：</p>\n<ul>\n<li><strong>Observable:</strong> 代表数据与事件的集合，这个集合可以被调用，从而可以生成数据和事件。</li>\n<li><strong>Observer:</strong> 回调函数的集合，用于获取想要数据。这些数据来自于Observable。</li>\n<li><strong>Subscription:</strong> 用于表示Observable的执行状态，主要用于执行的取消。</li>\n<li><strong>Operator:</strong> 函数式风格的纯函数，通过<code>map</code>, <code>filter</code>, <code>concat</code>, <code>flatMap</code>等操作对集合进行处理。</li>\n<li><strong>Subject:</strong> 与EventEmitter等价，唯一可以将一个值或者事件向个多个Observer进行广播的办法。</li>\n<li><strong>Schedulers:</strong> 一个中心化的、控制并发的分发器，允许我们可以在象<code>setTimeout</code>、<code>requestAnimationFrame</code>或者其它类似的计算中可以进行调整。</li>\n</ul>\n<h2 id=\"第一个例子\"><a href=\"#第一个例子\" class=\"headerlink\" title=\"第一个例子\"></a>第一个例子</h2><p>通常你是这样注册事件的侦听器(listener)的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'Clicked!'</span>));</div></pre></td></tr></table></figure></p>\n<p>使用RxJS的话，你要创建一个Observable来替换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Clicked!'</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"纯粹-Purity\"><a href=\"#纯粹-Purity\" class=\"headerlink\" title=\"纯粹(Purity)\"></a>纯粹(Purity)</h3><p>让RxJS强大的是它能完全通过函数来生成数值，这也就意味着可以减少代码出错的机会。</p>\n<p>通常你会创建比较不纯粹的函数，在这样的函数里，其它的代码片段会让你的状态变的混乱。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;++count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>\n<p>而使用RxJS可以将你的状态进行隔离。</p>\n<blockquote>\n<p>译者注： 指count不再需要定义在外面。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .scan(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>\n<p>这里<strong>scan</strong>运算子的工作方式与<strong>reduce</strong>在数组里的工作方式是一样的。它从传给回调函数的值中获取值。返回的值将会作为下一次的传入值。</p>\n<blockquote>\n<p>译者注：scan第二个参数0是初始值。对于上面的函数来说就可以用来侦听被点击的次数了，非常的方便。</p>\n</blockquote>\n<h3 id=\"流转（Flow）\"><a href=\"#流转（Flow）\" class=\"headerlink\" title=\"流转（Flow）\"></a>流转（Flow）</h3><p>RxJS有一堆的运算子可以帮助你控制事件如何在你的可观察对象里流转。</p>\n<p>下面是你在纯JavaScript下允许一分钟最多一次点击的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> rate = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastClick = <span class=\"built_in\">Date</span>.now() - rate;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - lastClick &gt;= rate) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;++count&#125;</span> times`</span>);</div><div class=\"line\">    lastClick = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用RxJS后:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .throttleTime(<span class=\"number\">1000</span>)</div><div class=\"line\">  .scan(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>\n<p>其实的流转控制运算子还有<a href=\"../class/es6/Observable.js~Observable.html#instance-method-filter\"><strong>filter</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-delay\"><strong>delay</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-debounceTime\"><strong>debounceTime</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-take\"><strong>take</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-takeUntil\"><strong>takeUntil</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-distinct\"><strong>distinct</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-distinctUntilChanged\"><strong>distinctUntilChanged</strong></a>等。</p>\n<h3 id=\"值-Values\"><a href=\"#值-Values\" class=\"headerlink\" title=\"值(Values)\"></a>值(Values)</h3><p>你可以转化赋给你的观察者的值。</p>\n<p>下面是你在纯JavaScript下添加当前鼠标的每个点击事件的x轴位置的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> rate = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastClick = <span class=\"built_in\">Date</span>.now() - rate;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - lastClick &gt;= rate) &#123;</div><div class=\"line\">    count += event.clientX;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(count)</div><div class=\"line\">    lastClick = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用RxJS后:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .throttleTime(<span class=\"number\">1000</span>)</div><div class=\"line\">  .map(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> event.clientX)</div><div class=\"line\">  .scan(<span class=\"function\">(<span class=\"params\">count, clientX</span>) =&gt;</span> count + clientX, <span class=\"number\">0</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"built_in\">console</span>.log(count));</div></pre></td></tr></table></figure>\n<p>另外几个用于生成值的运算子有<a href=\"../class/es6/Observable.js~Observable.html#instance-method-pluck\"><strong>pluck</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-pairwise\"><strong>pairwise</strong></a>,<br><a href=\"../class/es6/Observable.js~Observable.html#instance-method-sample\"><strong>sample</strong></a>等。</p>\n<blockquote>\n<p>译者注：这里map可以将事件里的值取出来，如果不进行map，clientX里的值就是事件本身。<br>这里要注意的是每次变换，其实对象是发生变化的。subscribe一次之后就不能再subscribe了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>RxJS是一个基于可观察对象(Observable)序列，用于异步或者事件编程的库。它提供一个核心类型，<a href=\"&#39;./overview.html#observable&#39;\">Observable</a> ，几个卫星类型（Observer, Schedulers, Subjects）以及一些由<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6\" target=\"_blank\" rel=\"external\">Array#extras</a> (map, filter, reduce, every等)激发的，让异步事件可以以集合的方式被处理的运算子(Operators)。</p>\n<p><span class=\"informal\">可以将RxJS想象成是用于处理事件的Lodash.</span></p>\n<p>ReactiveX将<a href=\"https://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"external\">Observer模式</a>和<a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\" target=\"_blank\" rel=\"external\">Iterator模式</a>和对集合进行函数式编程结合起来，从而满足了对事件序列进行管理的需求。</p>\n<p>RxJS用于解决异步事件的管理问题，它的核心概念如下：</p>\n<ul>\n<li><strong>Observable:</strong> 代表数据与事件的集合，这个集合可以被调用，从而可以生成数据和事件。</li>\n<li><strong>Observer:</strong> 回调函数的集合，用于获取想要数据。这些数据来自于Observable。</li>\n<li><strong>Subscription:</strong> 用于表示Observable的执行状态，主要用于执行的取消。</li>\n<li><strong>Operator:</strong> 函数式风格的纯函数，通过<code>map</code>, <code>filter</code>, <code>concat</code>, <code>flatMap</code>等操作对集合进行处理。</li>\n<li><strong>Subject:</strong> 与EventEmitter等价，唯一可以将一个值或者事件向个多个Observer进行广播的办法。</li>\n<li><strong>Schedulers:</strong> 一个中心化的、控制并发的分发器，允许我们可以在象<code>setTimeout</code>、<code>requestAnimationFrame</code>或者其它类似的计算中可以进行调整。</li>\n</ul>\n<h2 id=\"第一个例子\"><a href=\"#第一个例子\" class=\"headerlink\" title=\"第一个例子\"></a>第一个例子</h2><p>通常你是这样注册事件的侦听器(listener)的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'Clicked!'</span>));</div></pre></td></tr></table></figure></p>\n<p>使用RxJS的话，你要创建一个Observable来替换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Clicked!'</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"纯粹-Purity\"><a href=\"#纯粹-Purity\" class=\"headerlink\" title=\"纯粹(Purity)\"></a>纯粹(Purity)</h3><p>让RxJS强大的是它能完全通过函数来生成数值，这也就意味着可以减少代码出错的机会。</p>\n<p>通常你会创建比较不纯粹的函数，在这样的函数里，其它的代码片段会让你的状态变的混乱。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;++count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>\n<p>而使用RxJS可以将你的状态进行隔离。</p>\n<blockquote>\n<p>译者注： 指count不再需要定义在外面。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .scan(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>\n<p>这里<strong>scan</strong>运算子的工作方式与<strong>reduce</strong>在数组里的工作方式是一样的。它从传给回调函数的值中获取值。返回的值将会作为下一次的传入值。</p>\n<blockquote>\n<p>译者注：scan第二个参数0是初始值。对于上面的函数来说就可以用来侦听被点击的次数了，非常的方便。</p>\n</blockquote>\n<h3 id=\"流转（Flow）\"><a href=\"#流转（Flow）\" class=\"headerlink\" title=\"流转（Flow）\"></a>流转（Flow）</h3><p>RxJS有一堆的运算子可以帮助你控制事件如何在你的可观察对象里流转。</p>\n<p>下面是你在纯JavaScript下允许一分钟最多一次点击的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> rate = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastClick = <span class=\"built_in\">Date</span>.now() - rate;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - lastClick &gt;= rate) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;++count&#125;</span> times`</span>);</div><div class=\"line\">    lastClick = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用RxJS后:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .throttleTime(<span class=\"number\">1000</span>)</div><div class=\"line\">  .scan(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>\n<p>其实的流转控制运算子还有<a href=\"../class/es6/Observable.js~Observable.html#instance-method-filter\"><strong>filter</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-delay\"><strong>delay</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-debounceTime\"><strong>debounceTime</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-take\"><strong>take</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-takeUntil\"><strong>takeUntil</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-distinct\"><strong>distinct</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-distinctUntilChanged\"><strong>distinctUntilChanged</strong></a>等。</p>\n<h3 id=\"值-Values\"><a href=\"#值-Values\" class=\"headerlink\" title=\"值(Values)\"></a>值(Values)</h3><p>你可以转化赋给你的观察者的值。</p>\n<p>下面是你在纯JavaScript下添加当前鼠标的每个点击事件的x轴位置的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> rate = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastClick = <span class=\"built_in\">Date</span>.now() - rate;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - lastClick &gt;= rate) &#123;</div><div class=\"line\">    count += event.clientX;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(count)</div><div class=\"line\">    lastClick = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用RxJS后:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</div><div class=\"line\">Rx.Observable.fromEvent(button, <span class=\"string\">'click'</span>)</div><div class=\"line\">  .throttleTime(<span class=\"number\">1000</span>)</div><div class=\"line\">  .map(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> event.clientX)</div><div class=\"line\">  .scan(<span class=\"function\">(<span class=\"params\">count, clientX</span>) =&gt;</span> count + clientX, <span class=\"number\">0</span>)</div><div class=\"line\">  .subscribe(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"built_in\">console</span>.log(count));</div></pre></td></tr></table></figure>\n<p>另外几个用于生成值的运算子有<a href=\"../class/es6/Observable.js~Observable.html#instance-method-pluck\"><strong>pluck</strong></a>, <a href=\"../class/es6/Observable.js~Observable.html#instance-method-pairwise\"><strong>pairwise</strong></a>,<br><a href=\"../class/es6/Observable.js~Observable.html#instance-method-sample\"><strong>sample</strong></a>等。</p>\n<blockquote>\n<p>译者注：这里map可以将事件里的值取出来，如果不进行map，clientX里的值就是事件本身。<br>这里要注意的是每次变换，其实对象是发生变化的。subscribe一次之后就不能再subscribe了。</p>\n</blockquote>\n"},{"title":"修正browser-sync公众号文章的错误","date":"2017-01-21T14:30:29.000Z","_content":"首先说说声对不起，在上一篇的公众号文章：《放弃F5，拥抱browser-sync》中存在几个错误点。链接地址:\n\n<https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&mid=2247483709&idx=1&sn=9939c3029c12ef1f716111cd0c9e9ffc&chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&mpshare=1&scene=1&srcid=0228DCwqHbO5bJNRzdNcoQaJ&key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&ascene=0&uin=MTkwMTU1MzgyMw%3D%3D&devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&version=12020010&nettype=WIFI&fontScale=100&pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z>\n\n几个错误点修改如下：\n1. 文章中的：\n*......更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试...*\n将“进项调试”修改为“进行调试”\n2.　最后的代码有一个目录错误，因为我的粗心，给大家带来的不变，请见谅！在以后的文章中我会更加小心\n发表文章，力求保证没有错误！\n```\nvar gulp        = require('gulp');\nvar browserSync = require('browser-sync').create();\nvar browserify = require('gulp-browserify');\nvar sass        = require('gulp-sass');\nvar uglify = require('gulp-uglify');\n// Compile sass into CSS & auto-inject into browsers\ngulp.task('sass', function() {\n    return gulp.src(\"app/scss/*.scss\")\n        .pipe(sass())\n        .pipe(gulp.dest(\"dist/css\"))\n        .pipe(browserSync.stream());\n});\n// process JS files and return the stream.\ngulp.task('js', function () {\n    return gulp.src('app/js/*.js')\n        .pipe(browserify())\n        .pipe(uglify())\n        .pipe(gulp.dest('dist/js'));\n});\n// Static Server + watching scss/js/html files\ngulp.task('serve', ['sass','js'], function() {\n    browserSync.init({\n        server: \"./app\"\n    });\n    gulp.watch(\"app/scss/*.scss\", ['sass']);\n        gulp.watch(\"app/js/*.js\", ['js']);\n    gulp.watch(\"app/*.html\").on('change', browserSync.reload);\n});\ngulp.task('default', ['serve']);\n```\n修改为：\n```\nvar gulp        = require('gulp');\nvar browserSync = require('browser-sync').create();\nvar browserify = require('gulp-browserify');\nvar sass        = require('gulp-sass');\nvar uglify = require('gulp-uglify');\n// Compile sass into CSS & auto-inject into browsers\ngulp.task('sass', function() {\n    return gulp.src(\"app/scss/*.scss\")\n        .pipe(sass())\n        .pipe(gulp.dest(\".app/dist/css\"))\n        .pipe(browserSync.stream());\n});\n// process JS files and return the stream.\ngulp.task('js', function () {\n    return gulp.src('app/js/*.js')\n        .pipe(browserify())\n        .pipe(uglify())\n        .pipe(gulp.dest('.app/dist/js'));\n});\n// Static Server + watching scss/js/html files\ngulp.task('serve', ['sass','js'], function() {\n    browserSync.init({\n        server: \"./app\"\n    });\n    gulp.watch(\"app/scss/*.scss\", ['sass']);\n        gulp.watch(\"app/js/*.js\", ['js']);\n    gulp.watch(\"app/*.html\").on('change', browserSync.reload);\n});\ngulp.task('default', ['serve']);\n```\n\n参照对比原文地址：\n\n<https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&mid=2247483709&idx=1&sn=9939c3029c12ef1f716111cd0c9e9ffc&chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&mpshare=1&scene=1&srcid=0228DCwqHbO5bJNRzdNcoQaJ&key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&ascene=0&uin=MTkwMTU1MzgyMw%3D%3D&devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&version=12020010&nettype=WIFI&fontScale=100&pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z>\n\n目前内容已经修改！欢迎反馈，欢迎交流：\n\n![strongant公众号二维码](http://mmbiz.qpic.cn/mmbiz_png/bLPd4tHRLu6MfYBKkZ6Rkk5E2H92YaZN1JO92ub5SEVFEPxCHY8PCRHTLUHXiaghl4p7hRnxT8yySSdl7ZV7epA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)","source":"_posts/修正browser-sync公众号文章的错误.md","raw":"---\ntitle: 修正browser-sync公众号文章的错误\ndate: 2017-01-21 22:30:29\ntags:\n---\n首先说说声对不起，在上一篇的公众号文章：《放弃F5，拥抱browser-sync》中存在几个错误点。链接地址:\n\n<https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&mid=2247483709&idx=1&sn=9939c3029c12ef1f716111cd0c9e9ffc&chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&mpshare=1&scene=1&srcid=0228DCwqHbO5bJNRzdNcoQaJ&key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&ascene=0&uin=MTkwMTU1MzgyMw%3D%3D&devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&version=12020010&nettype=WIFI&fontScale=100&pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z>\n\n几个错误点修改如下：\n1. 文章中的：\n*......更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试...*\n将“进项调试”修改为“进行调试”\n2.　最后的代码有一个目录错误，因为我的粗心，给大家带来的不变，请见谅！在以后的文章中我会更加小心\n发表文章，力求保证没有错误！\n```\nvar gulp        = require('gulp');\nvar browserSync = require('browser-sync').create();\nvar browserify = require('gulp-browserify');\nvar sass        = require('gulp-sass');\nvar uglify = require('gulp-uglify');\n// Compile sass into CSS & auto-inject into browsers\ngulp.task('sass', function() {\n    return gulp.src(\"app/scss/*.scss\")\n        .pipe(sass())\n        .pipe(gulp.dest(\"dist/css\"))\n        .pipe(browserSync.stream());\n});\n// process JS files and return the stream.\ngulp.task('js', function () {\n    return gulp.src('app/js/*.js')\n        .pipe(browserify())\n        .pipe(uglify())\n        .pipe(gulp.dest('dist/js'));\n});\n// Static Server + watching scss/js/html files\ngulp.task('serve', ['sass','js'], function() {\n    browserSync.init({\n        server: \"./app\"\n    });\n    gulp.watch(\"app/scss/*.scss\", ['sass']);\n        gulp.watch(\"app/js/*.js\", ['js']);\n    gulp.watch(\"app/*.html\").on('change', browserSync.reload);\n});\ngulp.task('default', ['serve']);\n```\n修改为：\n```\nvar gulp        = require('gulp');\nvar browserSync = require('browser-sync').create();\nvar browserify = require('gulp-browserify');\nvar sass        = require('gulp-sass');\nvar uglify = require('gulp-uglify');\n// Compile sass into CSS & auto-inject into browsers\ngulp.task('sass', function() {\n    return gulp.src(\"app/scss/*.scss\")\n        .pipe(sass())\n        .pipe(gulp.dest(\".app/dist/css\"))\n        .pipe(browserSync.stream());\n});\n// process JS files and return the stream.\ngulp.task('js', function () {\n    return gulp.src('app/js/*.js')\n        .pipe(browserify())\n        .pipe(uglify())\n        .pipe(gulp.dest('.app/dist/js'));\n});\n// Static Server + watching scss/js/html files\ngulp.task('serve', ['sass','js'], function() {\n    browserSync.init({\n        server: \"./app\"\n    });\n    gulp.watch(\"app/scss/*.scss\", ['sass']);\n        gulp.watch(\"app/js/*.js\", ['js']);\n    gulp.watch(\"app/*.html\").on('change', browserSync.reload);\n});\ngulp.task('default', ['serve']);\n```\n\n参照对比原文地址：\n\n<https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&mid=2247483709&idx=1&sn=9939c3029c12ef1f716111cd0c9e9ffc&chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&mpshare=1&scene=1&srcid=0228DCwqHbO5bJNRzdNcoQaJ&key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&ascene=0&uin=MTkwMTU1MzgyMw%3D%3D&devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&version=12020010&nettype=WIFI&fontScale=100&pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z>\n\n目前内容已经修改！欢迎反馈，欢迎交流：\n\n![strongant公众号二维码](http://mmbiz.qpic.cn/mmbiz_png/bLPd4tHRLu6MfYBKkZ6Rkk5E2H92YaZN1JO92ub5SEVFEPxCHY8PCRHTLUHXiaghl4p7hRnxT8yySSdl7ZV7epA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)","slug":"修正browser-sync公众号文章的错误","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43bg000cubo7k94m2con","content":"<p>首先说说声对不起，在上一篇的公众号文章：《放弃F5，拥抱browser-sync》中存在几个错误点。链接地址:</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z</a></p>\n<p>几个错误点修改如下：</p>\n<ol>\n<li>文章中的：<br><em>……更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试…</em><br>将“进项调试”修改为“进行调试”<br>2.　最后的代码有一个目录错误，因为我的粗心，给大家带来的不变，请见谅！在以后的文章中我会更加小心<br>发表文章，力求保证没有错误！<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp        = require(&apos;gulp&apos;);</div><div class=\"line\">var browserSync = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">var browserify = require(&apos;gulp-browserify&apos;);</div><div class=\"line\">var sass        = require(&apos;gulp-sass&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">// Compile sass into CSS &amp; auto-inject into browsers</div><div class=\"line\">gulp.task(&apos;sass&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&quot;app/scss/*.scss&quot;)</div><div class=\"line\">        .pipe(sass())</div><div class=\"line\">        .pipe(gulp.dest(&quot;dist/css&quot;))</div><div class=\"line\">        .pipe(browserSync.stream());</div><div class=\"line\">&#125;);</div><div class=\"line\">// process JS files and return the stream.</div><div class=\"line\">gulp.task(&apos;js&apos;, function () &#123;</div><div class=\"line\">    return gulp.src(&apos;app/js/*.js&apos;)</div><div class=\"line\">        .pipe(browserify())</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(&apos;dist/js&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// Static Server + watching scss/js/html files</div><div class=\"line\">gulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123;</div><div class=\"line\">    browserSync.init(&#123;</div><div class=\"line\">        server: &quot;./app&quot;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]);</div><div class=\"line\">        gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]);</div><div class=\"line\">    gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;, [&apos;serve&apos;]);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp        = require(&apos;gulp&apos;);</div><div class=\"line\">var browserSync = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">var browserify = require(&apos;gulp-browserify&apos;);</div><div class=\"line\">var sass        = require(&apos;gulp-sass&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">// Compile sass into CSS &amp; auto-inject into browsers</div><div class=\"line\">gulp.task(&apos;sass&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&quot;app/scss/*.scss&quot;)</div><div class=\"line\">        .pipe(sass())</div><div class=\"line\">        .pipe(gulp.dest(&quot;.app/dist/css&quot;))</div><div class=\"line\">        .pipe(browserSync.stream());</div><div class=\"line\">&#125;);</div><div class=\"line\">// process JS files and return the stream.</div><div class=\"line\">gulp.task(&apos;js&apos;, function () &#123;</div><div class=\"line\">    return gulp.src(&apos;app/js/*.js&apos;)</div><div class=\"line\">        .pipe(browserify())</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(&apos;.app/dist/js&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// Static Server + watching scss/js/html files</div><div class=\"line\">gulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123;</div><div class=\"line\">    browserSync.init(&#123;</div><div class=\"line\">        server: &quot;./app&quot;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]);</div><div class=\"line\">        gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]);</div><div class=\"line\">    gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;, [&apos;serve&apos;]);</div></pre></td></tr></table></figure></p>\n<p>参照对比原文地址：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z</a></p>\n<p>目前内容已经修改！欢迎反馈，欢迎交流：</p>\n<p><img src=\"http://mmbiz.qpic.cn/mmbiz_png/bLPd4tHRLu6MfYBKkZ6Rkk5E2H92YaZN1JO92ub5SEVFEPxCHY8PCRHTLUHXiaghl4p7hRnxT8yySSdl7ZV7epA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"strongant公众号二维码\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先说说声对不起，在上一篇的公众号文章：《放弃F5，拥抱browser-sync》中存在几个错误点。链接地址:</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z</a></p>\n<p>几个错误点修改如下：</p>\n<ol>\n<li>文章中的：<br><em>……更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试…</em><br>将“进项调试”修改为“进行调试”<br>2.　最后的代码有一个目录错误，因为我的粗心，给大家带来的不变，请见谅！在以后的文章中我会更加小心<br>发表文章，力求保证没有错误！<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp        = require(&apos;gulp&apos;);</div><div class=\"line\">var browserSync = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">var browserify = require(&apos;gulp-browserify&apos;);</div><div class=\"line\">var sass        = require(&apos;gulp-sass&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">// Compile sass into CSS &amp; auto-inject into browsers</div><div class=\"line\">gulp.task(&apos;sass&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&quot;app/scss/*.scss&quot;)</div><div class=\"line\">        .pipe(sass())</div><div class=\"line\">        .pipe(gulp.dest(&quot;dist/css&quot;))</div><div class=\"line\">        .pipe(browserSync.stream());</div><div class=\"line\">&#125;);</div><div class=\"line\">// process JS files and return the stream.</div><div class=\"line\">gulp.task(&apos;js&apos;, function () &#123;</div><div class=\"line\">    return gulp.src(&apos;app/js/*.js&apos;)</div><div class=\"line\">        .pipe(browserify())</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(&apos;dist/js&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// Static Server + watching scss/js/html files</div><div class=\"line\">gulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123;</div><div class=\"line\">    browserSync.init(&#123;</div><div class=\"line\">        server: &quot;./app&quot;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]);</div><div class=\"line\">        gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]);</div><div class=\"line\">    gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;, [&apos;serve&apos;]);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp        = require(&apos;gulp&apos;);</div><div class=\"line\">var browserSync = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">var browserify = require(&apos;gulp-browserify&apos;);</div><div class=\"line\">var sass        = require(&apos;gulp-sass&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">// Compile sass into CSS &amp; auto-inject into browsers</div><div class=\"line\">gulp.task(&apos;sass&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&quot;app/scss/*.scss&quot;)</div><div class=\"line\">        .pipe(sass())</div><div class=\"line\">        .pipe(gulp.dest(&quot;.app/dist/css&quot;))</div><div class=\"line\">        .pipe(browserSync.stream());</div><div class=\"line\">&#125;);</div><div class=\"line\">// process JS files and return the stream.</div><div class=\"line\">gulp.task(&apos;js&apos;, function () &#123;</div><div class=\"line\">    return gulp.src(&apos;app/js/*.js&apos;)</div><div class=\"line\">        .pipe(browserify())</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(&apos;.app/dist/js&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// Static Server + watching scss/js/html files</div><div class=\"line\">gulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123;</div><div class=\"line\">    browserSync.init(&#123;</div><div class=\"line\">        server: &quot;./app&quot;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]);</div><div class=\"line\">        gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]);</div><div class=\"line\">    gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;, [&apos;serve&apos;]);</div></pre></td></tr></table></figure></p>\n<p>参照对比原文地址：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z</a></p>\n<p>目前内容已经修改！欢迎反馈，欢迎交流：</p>\n<p><img src=\"http://mmbiz.qpic.cn/mmbiz_png/bLPd4tHRLu6MfYBKkZ6Rkk5E2H92YaZN1JO92ub5SEVFEPxCHY8PCRHTLUHXiaghl4p7hRnxT8yySSdl7ZV7epA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"strongant公众号二维码\"></p>\n"},{"title":"使用springdata操作es出错org.elasticsearch.client.transport.NoNodeAvailableException","author":"strongant","date":"2017-07-21T01:48:10.000Z","comments":1,"reward":true,"_content":"  之前的项目中使用的是http-client操作es，比较轻量级。目前为了学习下springdata，使用Java API 的方式来操作ES，但是在引入SpringData的es模块依赖后，操作es并未成功，出现以下错误：\n```\norg.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]\n```\n\n**注意：**如果你下载elasticsearch的压缩包安装的话，可能不会出现该问题！因为es默认的配置文件cluster.name是elasticsearch。但是奇葩的是使用brew安装es之后，默认的elasticsearch.yml的配置项成了这样：cluster.name: elasticsearch_bwh，就是这个原因导致了这个问题的产生，项目启动后控制台一直抛这个错：\n```\ntransport#-1}{127.0.0.1}{127.0.0.1:9300} not part of the cluster Cluster [Assassin], ignoring...\n```\n当执行添加操作时，提示：\n```\norg.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]\n```\n最后需要注意的是，如果你修改了es默认的集群名称，则需要在src/main/resources/application.properties配置文件中进行指定：\n\nspring.data.elasticsearch.clusterName=elasticsearch_bwh\n通过源码org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties可以看到，默认的\nclusterName为elasticsearch。\n \n希望可以帮助遇到此类问题的同学。","source":"_posts/使用springdata操作es出错org-elasticsearch-client-transport-NoNodeAvailableException.md","raw":"title: 使用springdata操作es出错org.elasticsearch.client.transport.NoNodeAvailableException\nauthor: strongant\ndate: 2017-07-21 09:48:10\ntags: [SpringData,Elasticsearch]\ncategories: [SpringData]\ncomments: true\nreward: true\n---\n  之前的项目中使用的是http-client操作es，比较轻量级。目前为了学习下springdata，使用Java API 的方式来操作ES，但是在引入SpringData的es模块依赖后，操作es并未成功，出现以下错误：\n```\norg.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]\n```\n\n**注意：**如果你下载elasticsearch的压缩包安装的话，可能不会出现该问题！因为es默认的配置文件cluster.name是elasticsearch。但是奇葩的是使用brew安装es之后，默认的elasticsearch.yml的配置项成了这样：cluster.name: elasticsearch_bwh，就是这个原因导致了这个问题的产生，项目启动后控制台一直抛这个错：\n```\ntransport#-1}{127.0.0.1}{127.0.0.1:9300} not part of the cluster Cluster [Assassin], ignoring...\n```\n当执行添加操作时，提示：\n```\norg.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]\n```\n最后需要注意的是，如果你修改了es默认的集群名称，则需要在src/main/resources/application.properties配置文件中进行指定：\n\nspring.data.elasticsearch.clusterName=elasticsearch_bwh\n通过源码org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties可以看到，默认的\nclusterName为elasticsearch。\n \n希望可以帮助遇到此类问题的同学。","slug":"使用springdata操作es出错org-elasticsearch-client-transport-NoNodeAvailableException","published":1,"updated":"2017-07-21T01:54:33.000Z","layout":"post","photos":[],"link":"","_id":"cj5fd43bi000eubo7n3ys2zgb","content":"<p>  之前的项目中使用的是http-client操作es，比较轻量级。目前为了学习下springdata，使用Java API 的方式来操作ES，但是在引入SpringData的es模块依赖后，操作es并未成功，出现以下错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>如果你下载elasticsearch的压缩包安装的话，可能不会出现该问题！因为es默认的配置文件cluster.name是elasticsearch。但是奇葩的是使用brew安装es之后，默认的elasticsearch.yml的配置项成了这样：cluster.name: elasticsearch_bwh，就是这个原因导致了这个问题的产生，项目启动后控制台一直抛这个错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125; not part of the cluster Cluster [Assassin], ignoring...</div></pre></td></tr></table></figure></p>\n<p>当执行添加操作时，提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure></p>\n<p>最后需要注意的是，如果你修改了es默认的集群名称，则需要在src/main/resources/application.properties配置文件中进行指定：</p>\n<p>spring.data.elasticsearch.clusterName=elasticsearch_bwh<br>通过源码org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties可以看到，默认的<br>clusterName为elasticsearch。</p>\n<p>希望可以帮助遇到此类问题的同学。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  之前的项目中使用的是http-client操作es，比较轻量级。目前为了学习下springdata，使用Java API 的方式来操作ES，但是在引入SpringData的es模块依赖后，操作es并未成功，出现以下错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>如果你下载elasticsearch的压缩包安装的话，可能不会出现该问题！因为es默认的配置文件cluster.name是elasticsearch。但是奇葩的是使用brew安装es之后，默认的elasticsearch.yml的配置项成了这样：cluster.name: elasticsearch_bwh，就是这个原因导致了这个问题的产生，项目启动后控制台一直抛这个错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125; not part of the cluster Cluster [Assassin], ignoring...</div></pre></td></tr></table></figure></p>\n<p>当执行添加操作时，提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure></p>\n<p>最后需要注意的是，如果你修改了es默认的集群名称，则需要在src/main/resources/application.properties配置文件中进行指定：</p>\n<p>spring.data.elasticsearch.clusterName=elasticsearch_bwh<br>通过源码org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties可以看到，默认的<br>clusterName为elasticsearch。</p>\n<p>希望可以帮助遇到此类问题的同学。</p>\n"},{"title":"春节回家","date":"2017-01-23T13:20:53.000Z","_content":"<center>![plane](http://i1.piimg.com/4851/b70e6f5b8f4e2ba5.jpg)</center>\n\n\n**对于刚过去不远的2016年，有欢乐，有辛酸，有失望，有快乐！还记得自己2016年年初的时候计划通过自己的努力买一台MakBook Pro（非正式工资的钱买），可到头来并没有完成我的这个愿望！**\n\n**远在他乡的我，随着年龄的增长，感到些许压抑、彷徨和不安，在新的2017年我决定奋力冲刺，早日实现自己的梦想！**\n\n**远在他乡，来到陌生的城市，看着天天上涨的房价，买房这件事情也只能想想。自己长大了，父母却老了，他们需要我们的照顾，在一线城市上几年班，攒个首付去二三线城市买一套房子然后打拼事业，这也是我的打算！乘着二三线城市的房价还没有大幅上涨，还是早下手为强！**\n\n**在一线城市上班，别人听起来工资很高，经常听到隔壁阿姨说：谁谁家的儿子在哪哪呢，一个月挣1W多呢，可是花销完，房租缴完，也剩不下多少钱了。要想拿到更多的薪水，就得从自身开始做起。我已经为自己制定好了2017年的计划，你呢？**\n\n\n**在这里，提前祝大家新年快乐！以上是我的一点生活感触，博客地址：<http://baiwenhui.com>，欢迎交流、分享：**\n\n<center> ![qrcode](http://i1.piimg.com/4851/71f2c239602d5025.jpg)</center>","source":"_posts/春节回家.md","raw":"---\ntitle: 春节回家\ndate: 2017-01-23 21:20:53\ntags: 生活感悟\n---\n<center>![plane](http://i1.piimg.com/4851/b70e6f5b8f4e2ba5.jpg)</center>\n\n\n**对于刚过去不远的2016年，有欢乐，有辛酸，有失望，有快乐！还记得自己2016年年初的时候计划通过自己的努力买一台MakBook Pro（非正式工资的钱买），可到头来并没有完成我的这个愿望！**\n\n**远在他乡的我，随着年龄的增长，感到些许压抑、彷徨和不安，在新的2017年我决定奋力冲刺，早日实现自己的梦想！**\n\n**远在他乡，来到陌生的城市，看着天天上涨的房价，买房这件事情也只能想想。自己长大了，父母却老了，他们需要我们的照顾，在一线城市上几年班，攒个首付去二三线城市买一套房子然后打拼事业，这也是我的打算！乘着二三线城市的房价还没有大幅上涨，还是早下手为强！**\n\n**在一线城市上班，别人听起来工资很高，经常听到隔壁阿姨说：谁谁家的儿子在哪哪呢，一个月挣1W多呢，可是花销完，房租缴完，也剩不下多少钱了。要想拿到更多的薪水，就得从自身开始做起。我已经为自己制定好了2017年的计划，你呢？**\n\n\n**在这里，提前祝大家新年快乐！以上是我的一点生活感触，博客地址：<http://baiwenhui.com>，欢迎交流、分享：**\n\n<center> ![qrcode](http://i1.piimg.com/4851/71f2c239602d5025.jpg)</center>","slug":"春节回家","published":1,"updated":"2017-07-21T01:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5fd43bj000gubo78dhxpxze","content":"<center><img src=\"http://i1.piimg.com/4851/b70e6f5b8f4e2ba5.jpg\" alt=\"plane\"></center>\n\n\n<p><strong>对于刚过去不远的2016年，有欢乐，有辛酸，有失望，有快乐！还记得自己2016年年初的时候计划通过自己的努力买一台MakBook Pro（非正式工资的钱买），可到头来并没有完成我的这个愿望！</strong></p>\n<p><strong>远在他乡的我，随着年龄的增长，感到些许压抑、彷徨和不安，在新的2017年我决定奋力冲刺，早日实现自己的梦想！</strong></p>\n<p><strong>远在他乡，来到陌生的城市，看着天天上涨的房价，买房这件事情也只能想想。自己长大了，父母却老了，他们需要我们的照顾，在一线城市上几年班，攒个首付去二三线城市买一套房子然后打拼事业，这也是我的打算！乘着二三线城市的房价还没有大幅上涨，还是早下手为强！</strong></p>\n<p><strong>在一线城市上班，别人听起来工资很高，经常听到隔壁阿姨说：谁谁家的儿子在哪哪呢，一个月挣1W多呢，可是花销完，房租缴完，也剩不下多少钱了。要想拿到更多的薪水，就得从自身开始做起。我已经为自己制定好了2017年的计划，你呢？</strong></p>\n<p><strong>在这里，提前祝大家新年快乐！以上是我的一点生活感触，博客地址：<a href=\"http://baiwenhui.com\">http://baiwenhui.com</a>，欢迎交流、分享：</strong></p>\n<center> <img src=\"http://i1.piimg.com/4851/71f2c239602d5025.jpg\" alt=\"qrcode\"></center>","site":{"data":{}},"excerpt":"","more":"<center><img src=\"http://i1.piimg.com/4851/b70e6f5b8f4e2ba5.jpg\" alt=\"plane\"></center>\n\n\n<p><strong>对于刚过去不远的2016年，有欢乐，有辛酸，有失望，有快乐！还记得自己2016年年初的时候计划通过自己的努力买一台MakBook Pro（非正式工资的钱买），可到头来并没有完成我的这个愿望！</strong></p>\n<p><strong>远在他乡的我，随着年龄的增长，感到些许压抑、彷徨和不安，在新的2017年我决定奋力冲刺，早日实现自己的梦想！</strong></p>\n<p><strong>远在他乡，来到陌生的城市，看着天天上涨的房价，买房这件事情也只能想想。自己长大了，父母却老了，他们需要我们的照顾，在一线城市上几年班，攒个首付去二三线城市买一套房子然后打拼事业，这也是我的打算！乘着二三线城市的房价还没有大幅上涨，还是早下手为强！</strong></p>\n<p><strong>在一线城市上班，别人听起来工资很高，经常听到隔壁阿姨说：谁谁家的儿子在哪哪呢，一个月挣1W多呢，可是花销完，房租缴完，也剩不下多少钱了。要想拿到更多的薪水，就得从自身开始做起。我已经为自己制定好了2017年的计划，你呢？</strong></p>\n<p><strong>在这里，提前祝大家新年快乐！以上是我的一点生活感触，博客地址：<a href=\"http://baiwenhui.com\">http://baiwenhui.com</a>，欢迎交流、分享：</strong></p>\n<center> <img src=\"http://i1.piimg.com/4851/71f2c239602d5025.jpg\" alt=\"qrcode\"></center>"},{"title":"递归的执行原理浅析","date":"2017-05-29T15:48:17.000Z","comments":1,"_content":"\n1. 首先使用递归输出经典的阶乘，描述如下：\n* 1! =1\n* 2! = 2\n* 3! = 6\n...\n\n\n接下来使用常规的递归方式实现（Java），则可以得到以下程序：\n```Java\n/**\n     * Java普通递归实现阶乘\n     *\n     * @param n 传递的大于0的正整数\n     * @return 该数字的阶乘    如：传递3 则计算 1 * 2 * 3 =  6\n     * 递归的核心思想自我理解： 先入栈计算直到递归终止   然后初栈 对每个栈中的值进行计算  最后得到结果\n     */\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n```\n<center>![](/images/Java递归调用示意图.png)</center>\n<center>递归调用示意图</center>\n此递归的计算原理主要是先申请栈幁1到栈幁n，直到找到递归终止的条件，然后开始汇总结果，最后出栈，返回结果，这种递归算法方式有一个弊端，就是在计算的过程中当n很大的情况下会出现栈溢出的错误（java.lang.StackOverflowError），可以使用尾递归的方式进行优化，比如：\n```Java\n /**\n     * 使用尾递归进行计算阶乘\n     *\n     * @param n      需要计算的n的阶乘\n     * @param result 返回n的阶乘结果  如： 传递3  则计算 1 * 2 *3 = 6\n     *               计算过程如下： tailFactorial(3,1)\n     *               = tailFactorial(2,3*1)\n     *               = tailFactorial(1,2*3*1)\n     *               = tailFactorial(1,6)\n     *               = 6\n     *               揭秘：只使用一个栈幁就可以搞定计算\n     * @return 返回n的阶乘\n     */\n    public static int tailFactorial(int n, int result) {\n        if (n == 1) {\n            return result;\n        } else {\n            return tailFactorial(n - 1, n * result);\n        }\n    }\n```\n2. 计算a,b（a,b为非负整数）的最大公约数？\n此题目可以使用欧几里得算法进行解答，实现代码如下：\n```java\n/**\n     * 欧几里得算法计算两个数的最大公约数\n     * @param p 需要计算的数a\n     * @param q 需要计算的数b\n     * @return 返回a，b的最大公约数  a,b 是大于0 的正整数\n     * 算法描述： 计算两个非负整数的最大公约数： 若q是0，则最大公约数为p。否则，将p除以q得到余数r，p和q的最大公约数则为q和r的最大公约数\n     */\n    public static int greatestCommonDivisors(int p , int q){\n        if(q==0){\n            return p;\n        }\n        int r = p % q;\n        return greatestCommonDivisors(q,r);\n    }\n```\n\n最后我们开始使用递归遍历某个目录下的所有子目录和文件进行加深理解和运用：\n```Java\npublic static void printDirectoriesAndFilesByPath(String path) {\n        try {\n            File file = new File(path);\n            if (file.exists()) {\n                File[] files = file.listFiles();\n                for (File f :\n                        files) {\n                    if (f.isDirectory() && f.listFiles().length >= 0) {\n                        if (f.isDirectory()) {\n                            String directory = f.getAbsolutePath();\n                            System.out.println(\"-------目录名称:\" + f.getAbsolutePath());\n                            printDirectoriesAndFilesByPath(directory);\n                        }\n                    } else {\n                        System.out.println(\"-------目录名称:\"+f.getParent()+\"--->文件名称：\" + f.getAbsolutePath());\n                    }\n                }\n            } else {\n                System.out.println(\"对不起，文件路径不存在\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n","source":"_posts/递归原理解析.md","raw":"title: 递归的执行原理浅析\ndate: 2017-05-29 23:48:17\ntags: [DataStructureAndAlgorithm]\ncategories: [DataStructureAndAlgorithm]\ncomments: true\n---\n\n1. 首先使用递归输出经典的阶乘，描述如下：\n* 1! =1\n* 2! = 2\n* 3! = 6\n...\n\n\n接下来使用常规的递归方式实现（Java），则可以得到以下程序：\n```Java\n/**\n     * Java普通递归实现阶乘\n     *\n     * @param n 传递的大于0的正整数\n     * @return 该数字的阶乘    如：传递3 则计算 1 * 2 * 3 =  6\n     * 递归的核心思想自我理解： 先入栈计算直到递归终止   然后初栈 对每个栈中的值进行计算  最后得到结果\n     */\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n```\n<center>![](/images/Java递归调用示意图.png)</center>\n<center>递归调用示意图</center>\n此递归的计算原理主要是先申请栈幁1到栈幁n，直到找到递归终止的条件，然后开始汇总结果，最后出栈，返回结果，这种递归算法方式有一个弊端，就是在计算的过程中当n很大的情况下会出现栈溢出的错误（java.lang.StackOverflowError），可以使用尾递归的方式进行优化，比如：\n```Java\n /**\n     * 使用尾递归进行计算阶乘\n     *\n     * @param n      需要计算的n的阶乘\n     * @param result 返回n的阶乘结果  如： 传递3  则计算 1 * 2 *3 = 6\n     *               计算过程如下： tailFactorial(3,1)\n     *               = tailFactorial(2,3*1)\n     *               = tailFactorial(1,2*3*1)\n     *               = tailFactorial(1,6)\n     *               = 6\n     *               揭秘：只使用一个栈幁就可以搞定计算\n     * @return 返回n的阶乘\n     */\n    public static int tailFactorial(int n, int result) {\n        if (n == 1) {\n            return result;\n        } else {\n            return tailFactorial(n - 1, n * result);\n        }\n    }\n```\n2. 计算a,b（a,b为非负整数）的最大公约数？\n此题目可以使用欧几里得算法进行解答，实现代码如下：\n```java\n/**\n     * 欧几里得算法计算两个数的最大公约数\n     * @param p 需要计算的数a\n     * @param q 需要计算的数b\n     * @return 返回a，b的最大公约数  a,b 是大于0 的正整数\n     * 算法描述： 计算两个非负整数的最大公约数： 若q是0，则最大公约数为p。否则，将p除以q得到余数r，p和q的最大公约数则为q和r的最大公约数\n     */\n    public static int greatestCommonDivisors(int p , int q){\n        if(q==0){\n            return p;\n        }\n        int r = p % q;\n        return greatestCommonDivisors(q,r);\n    }\n```\n\n最后我们开始使用递归遍历某个目录下的所有子目录和文件进行加深理解和运用：\n```Java\npublic static void printDirectoriesAndFilesByPath(String path) {\n        try {\n            File file = new File(path);\n            if (file.exists()) {\n                File[] files = file.listFiles();\n                for (File f :\n                        files) {\n                    if (f.isDirectory() && f.listFiles().length >= 0) {\n                        if (f.isDirectory()) {\n                            String directory = f.getAbsolutePath();\n                            System.out.println(\"-------目录名称:\" + f.getAbsolutePath());\n                            printDirectoriesAndFilesByPath(directory);\n                        }\n                    } else {\n                        System.out.println(\"-------目录名称:\"+f.getParent()+\"--->文件名称：\" + f.getAbsolutePath());\n                    }\n                }\n            } else {\n                System.out.println(\"对不起，文件路径不存在\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n","slug":"递归原理解析","published":1,"updated":"2017-07-21T01:33:55.000Z","layout":"post","photos":[],"link":"","_id":"cj5fd43bm000kubo7wqsyvgaz","content":"<ol>\n<li>首先使用递归输出经典的阶乘，描述如下：</li>\n</ol>\n<ul>\n<li>1! =1</li>\n<li>2! = 2</li>\n<li>3! = 6<br>…</li>\n</ul>\n<p>接下来使用常规的递归方式实现（Java），则可以得到以下程序：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Java普通递归实现阶乘</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> n 传递的大于0的正整数</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 该数字的阶乘    如：传递3 则计算 1 * 2 * 3 =  6</div><div class=\"line\">     * 递归的核心思想自我理解： 先入栈计算直到递归终止   然后初栈 对每个栈中的值进行计算  最后得到结果</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><center><img src=\"/images/Java递归调用示意图.png\" alt=\"\"></center></p>\n<p><center>递归调用示意图</center><br>此递归的计算原理主要是先申请栈幁1到栈幁n，直到找到递归终止的条件，然后开始汇总结果，最后出栈，返回结果，这种递归算法方式有一个弊端，就是在计算的过程中当n很大的情况下会出现栈溢出的错误（java.lang.StackOverflowError），可以使用尾递归的方式进行优化，比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 使用尾递归进行计算阶乘</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> n      需要计算的n的阶乘</div><div class=\"line\">    * <span class=\"doctag\">@param</span> result 返回n的阶乘结果  如： 传递3  则计算 1 * 2 *3 = 6</div><div class=\"line\">    *               计算过程如下： tailFactorial(3,1)</div><div class=\"line\">    *               = tailFactorial(2,3*1)</div><div class=\"line\">    *               = tailFactorial(1,2*3*1)</div><div class=\"line\">    *               = tailFactorial(1,6)</div><div class=\"line\">    *               = 6</div><div class=\"line\">    *               揭秘：只使用一个栈幁就可以搞定计算</div><div class=\"line\">    * <span class=\"doctag\">@return</span> 返回n的阶乘</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">tailFactorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> result)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> result;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> tailFactorial(n - <span class=\"number\">1</span>, n * result);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>计算a,b（a,b为非负整数）的最大公约数？<br>此题目可以使用欧几里得算法进行解答，实现代码如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * 欧几里得算法计算两个数的最大公约数</div><div class=\"line\">     * <span class=\"doctag\">@param</span> p 需要计算的数a</div><div class=\"line\">     * <span class=\"doctag\">@param</span> q 需要计算的数b</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回a，b的最大公约数  a,b 是大于0 的正整数</div><div class=\"line\">     * 算法描述： 计算两个非负整数的最大公约数： 若q是0，则最大公约数为p。否则，将p除以q得到余数r，p和q的最大公约数则为q和r的最大公约数</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">greatestCommonDivisors</span><span class=\"params\">(<span class=\"keyword\">int</span> p , <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(q==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> p;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> r = p % q;</div><div class=\"line\">        <span class=\"keyword\">return</span> greatestCommonDivisors(q,r);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最后我们开始使用递归遍历某个目录下的所有子目录和文件进行加深理解和运用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printDirectoriesAndFilesByPath</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">            <span class=\"keyword\">if</span> (file.exists()) &#123;</div><div class=\"line\">                File[] files = file.listFiles();</div><div class=\"line\">                <span class=\"keyword\">for</span> (File f :</div><div class=\"line\">                        files) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (f.isDirectory() &amp;&amp; f.listFiles().length &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</div><div class=\"line\">                            String directory = f.getAbsolutePath();</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"-------目录名称:\"</span> + f.getAbsolutePath());</div><div class=\"line\">                            printDirectoriesAndFilesByPath(directory);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-------目录名称:\"</span>+f.getParent()+<span class=\"string\">\"---&gt;文件名称：\"</span> + f.getAbsolutePath());</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"对不起，文件路径不存在\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>首先使用递归输出经典的阶乘，描述如下：</li>\n</ol>\n<ul>\n<li>1! =1</li>\n<li>2! = 2</li>\n<li>3! = 6<br>…</li>\n</ul>\n<p>接下来使用常规的递归方式实现（Java），则可以得到以下程序：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Java普通递归实现阶乘</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> n 传递的大于0的正整数</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 该数字的阶乘    如：传递3 则计算 1 * 2 * 3 =  6</div><div class=\"line\">     * 递归的核心思想自我理解： 先入栈计算直到递归终止   然后初栈 对每个栈中的值进行计算  最后得到结果</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><center><img src=\"/images/Java递归调用示意图.png\" alt=\"\"></center></p>\n<p><center>递归调用示意图</center><br>此递归的计算原理主要是先申请栈幁1到栈幁n，直到找到递归终止的条件，然后开始汇总结果，最后出栈，返回结果，这种递归算法方式有一个弊端，就是在计算的过程中当n很大的情况下会出现栈溢出的错误（java.lang.StackOverflowError），可以使用尾递归的方式进行优化，比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 使用尾递归进行计算阶乘</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> n      需要计算的n的阶乘</div><div class=\"line\">    * <span class=\"doctag\">@param</span> result 返回n的阶乘结果  如： 传递3  则计算 1 * 2 *3 = 6</div><div class=\"line\">    *               计算过程如下： tailFactorial(3,1)</div><div class=\"line\">    *               = tailFactorial(2,3*1)</div><div class=\"line\">    *               = tailFactorial(1,2*3*1)</div><div class=\"line\">    *               = tailFactorial(1,6)</div><div class=\"line\">    *               = 6</div><div class=\"line\">    *               揭秘：只使用一个栈幁就可以搞定计算</div><div class=\"line\">    * <span class=\"doctag\">@return</span> 返回n的阶乘</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">tailFactorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> result)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> result;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> tailFactorial(n - <span class=\"number\">1</span>, n * result);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>计算a,b（a,b为非负整数）的最大公约数？<br>此题目可以使用欧几里得算法进行解答，实现代码如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * 欧几里得算法计算两个数的最大公约数</div><div class=\"line\">     * <span class=\"doctag\">@param</span> p 需要计算的数a</div><div class=\"line\">     * <span class=\"doctag\">@param</span> q 需要计算的数b</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回a，b的最大公约数  a,b 是大于0 的正整数</div><div class=\"line\">     * 算法描述： 计算两个非负整数的最大公约数： 若q是0，则最大公约数为p。否则，将p除以q得到余数r，p和q的最大公约数则为q和r的最大公约数</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">greatestCommonDivisors</span><span class=\"params\">(<span class=\"keyword\">int</span> p , <span class=\"keyword\">int</span> q)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(q==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> p;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> r = p % q;</div><div class=\"line\">        <span class=\"keyword\">return</span> greatestCommonDivisors(q,r);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最后我们开始使用递归遍历某个目录下的所有子目录和文件进行加深理解和运用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printDirectoriesAndFilesByPath</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">            <span class=\"keyword\">if</span> (file.exists()) &#123;</div><div class=\"line\">                File[] files = file.listFiles();</div><div class=\"line\">                <span class=\"keyword\">for</span> (File f :</div><div class=\"line\">                        files) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (f.isDirectory() &amp;&amp; f.listFiles().length &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</div><div class=\"line\">                            String directory = f.getAbsolutePath();</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"-------目录名称:\"</span> + f.getAbsolutePath());</div><div class=\"line\">                            printDirectoriesAndFilesByPath(directory);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-------目录名称:\"</span>+f.getParent()+<span class=\"string\">\"---&gt;文件名称：\"</span> + f.getAbsolutePath());</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"对不起，文件路径不存在\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"终端录制神器-showterm","author":"strongant","reward":true,"toc":true,"date":"2017-07-26T12:21:00.000Z","_content":"## 使用showterm对终端脚本进行录制\n\n### 安装\n\n1. 如果是Mac用户，直接使用如下命令即可安装(默认情况下，Mac OS X 系统已经安装好 Ruby):\n\n```\ngem install showterm \n```\n\n如果是Linux用户，可使用如下方式安装:\n\n```\ncurl showterm.io/showterm > /usr/local/bin/showterm\nchmod +x /usr/local/bin/showterm\n```\n\n2. 安装完毕之后便可以对终端进行录制了，录制后的结果是一个视频文件，并且为你自动生成一个可以公开访问的地址，非常方便；\n\n3. 验证是否安装成功：\n\n```\nshowterm -h\n```\n如果显示此工具使用方法，则说明安装成功！\n\n### 使用方法\n\n1. 打开终端，输入showterm，此时showterm会提示您正在进行脚本视频录制，如：\n```\nshowterm recording. (Exit shell when done.)\n```\n\n2. 当你脚本录入完毕后，此时便可以使用`exit`命令结束本次录制。此时你会得到以下类似提示：\n```\nshowterm recording finished.\nUploading...\nhttp://showterm.io/44c650714d8a45b265064\n```\n\n3. 此时打开<http://showterm.io/44c650714d8a45b265064> 链接便可以对刚才的脚本操作进行显示！\n\n","source":"_posts/终端录制神器.md","raw":"title: 终端录制神器-showterm\nauthor: strongant\ntags:\n  - 工具\n  - 终端\n  - showterm\nreward: true\ntoc: true\ncategories: []\ndate: 2017-07-26 20:21:00\n---\n## 使用showterm对终端脚本进行录制\n\n### 安装\n\n1. 如果是Mac用户，直接使用如下命令即可安装(默认情况下，Mac OS X 系统已经安装好 Ruby):\n\n```\ngem install showterm \n```\n\n如果是Linux用户，可使用如下方式安装:\n\n```\ncurl showterm.io/showterm > /usr/local/bin/showterm\nchmod +x /usr/local/bin/showterm\n```\n\n2. 安装完毕之后便可以对终端进行录制了，录制后的结果是一个视频文件，并且为你自动生成一个可以公开访问的地址，非常方便；\n\n3. 验证是否安装成功：\n\n```\nshowterm -h\n```\n如果显示此工具使用方法，则说明安装成功！\n\n### 使用方法\n\n1. 打开终端，输入showterm，此时showterm会提示您正在进行脚本视频录制，如：\n```\nshowterm recording. (Exit shell when done.)\n```\n\n2. 当你脚本录入完毕后，此时便可以使用`exit`命令结束本次录制。此时你会得到以下类似提示：\n```\nshowterm recording finished.\nUploading...\nhttp://showterm.io/44c650714d8a45b265064\n```\n\n3. 此时打开<http://showterm.io/44c650714d8a45b265064> 链接便可以对刚才的脚本操作进行显示！\n\n","slug":"终端录制神器","published":1,"updated":"2017-07-26T12:43:10.000Z","_id":"cj5kzbg6s0000a0o7t9ot77mi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"使用showterm对终端脚本进行录制\"><a href=\"#使用showterm对终端脚本进行录制\" class=\"headerlink\" title=\"使用showterm对终端脚本进行录制\"></a>使用showterm对终端脚本进行录制</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>如果是Mac用户，直接使用如下命令即可安装(默认情况下，Mac OS X 系统已经安装好 Ruby):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install showterm</div></pre></td></tr></table></figure>\n<p>如果是Linux用户，可使用如下方式安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl showterm.io/showterm &gt; /usr/local/bin/showterm</div><div class=\"line\">chmod +x /usr/local/bin/showterm</div></pre></td></tr></table></figure>\n<ol>\n<li><p>安装完毕之后便可以对终端进行录制了，录制后的结果是一个视频文件，并且为你自动生成一个可以公开访问的地址，非常方便；</p>\n</li>\n<li><p>验证是否安装成功：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">showterm -h</div></pre></td></tr></table></figure>\n<p>如果显示此工具使用方法，则说明安装成功！</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ol>\n<li><p>打开终端，输入showterm，此时showterm会提示您正在进行脚本视频录制，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">showterm recording. (Exit shell when done.)</div></pre></td></tr></table></figure>\n</li>\n<li><p>当你脚本录入完毕后，此时便可以使用<code>exit</code>命令结束本次录制。此时你会得到以下类似提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">showterm recording finished.</div><div class=\"line\">Uploading...</div><div class=\"line\">http://showterm.io/44c650714d8a45b265064</div></pre></td></tr></table></figure>\n</li>\n<li><p>此时打开<a href=\"http://showterm.io/44c650714d8a45b265064\" target=\"_blank\" rel=\"external\">http://showterm.io/44c650714d8a45b265064</a> 链接便可以对刚才的脚本操作进行显示！</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用showterm对终端脚本进行录制\"><a href=\"#使用showterm对终端脚本进行录制\" class=\"headerlink\" title=\"使用showterm对终端脚本进行录制\"></a>使用showterm对终端脚本进行录制</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>如果是Mac用户，直接使用如下命令即可安装(默认情况下，Mac OS X 系统已经安装好 Ruby):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install showterm</div></pre></td></tr></table></figure>\n<p>如果是Linux用户，可使用如下方式安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl showterm.io/showterm &gt; /usr/local/bin/showterm</div><div class=\"line\">chmod +x /usr/local/bin/showterm</div></pre></td></tr></table></figure>\n<ol>\n<li><p>安装完毕之后便可以对终端进行录制了，录制后的结果是一个视频文件，并且为你自动生成一个可以公开访问的地址，非常方便；</p>\n</li>\n<li><p>验证是否安装成功：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">showterm -h</div></pre></td></tr></table></figure>\n<p>如果显示此工具使用方法，则说明安装成功！</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ol>\n<li><p>打开终端，输入showterm，此时showterm会提示您正在进行脚本视频录制，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">showterm recording. (Exit shell when done.)</div></pre></td></tr></table></figure>\n</li>\n<li><p>当你脚本录入完毕后，此时便可以使用<code>exit</code>命令结束本次录制。此时你会得到以下类似提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">showterm recording finished.</div><div class=\"line\">Uploading...</div><div class=\"line\">http://showterm.io/44c650714d8a45b265064</div></pre></td></tr></table></figure>\n</li>\n<li><p>此时打开<a href=\"http://showterm.io/44c650714d8a45b265064\" target=\"_blank\" rel=\"external\">http://showterm.io/44c650714d8a45b265064</a> 链接便可以对刚才的脚本操作进行显示！</p>\n</li>\n</ol>\n"},{"title":"Ubuntu安装Java8环境","author":"strongant","date":"2017-07-26T13:32:00.000Z","_content":"## Ubuntu 系统安装Java8 JDK\n\n1.添加ppa\n```\nsudo add-apt-repository ppa:webupd8team/java\n```\n2.更新系统\n```\nsudo apt-get update\n```\n3.开始安装\n```\nsudo apt-get install oracle-java8-installer -y\n```\n\n4.验证是否安装成功\n```\njava -version\n```\n\n5.安装脚本gist地址(执行脚本时记得回车继续，其中弹出确认安装提示选择是即可，脚本执行完毕后就已经成功安装Java8了，安装大约得等待一段时间，请耐心等待！):\n<https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95>\n","source":"_posts/Ubuntu安装Java8环境.md","raw":"title: Ubuntu安装Java8环境\nauthor: strongant\ntags:\n  - jdk\n  - java8\n  - sh\ncategories: []\ndate: 2017-07-26 21:32:00\n---\n## Ubuntu 系统安装Java8 JDK\n\n1.添加ppa\n```\nsudo add-apt-repository ppa:webupd8team/java\n```\n2.更新系统\n```\nsudo apt-get update\n```\n3.开始安装\n```\nsudo apt-get install oracle-java8-installer -y\n```\n\n4.验证是否安装成功\n```\njava -version\n```\n\n5.安装脚本gist地址(执行脚本时记得回车继续，其中弹出确认安装提示选择是即可，脚本执行完毕后就已经成功安装Java8了，安装大约得等待一段时间，请耐心等待！):\n<https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95>\n","slug":"Ubuntu安装Java8环境","published":1,"updated":"2017-07-26T13:39:15.000Z","_id":"cj5l1v93u0007a0o7ym2lyusr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Ubuntu-系统安装Java8-JDK\"><a href=\"#Ubuntu-系统安装Java8-JDK\" class=\"headerlink\" title=\"Ubuntu 系统安装Java8 JDK\"></a>Ubuntu 系统安装Java8 JDK</h2><p>1.添加ppa<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/java</div></pre></td></tr></table></figure></p>\n<p>2.更新系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div></pre></td></tr></table></figure></p>\n<p>3.开始安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install oracle-java8-installer -y</div></pre></td></tr></table></figure></p>\n<p>4.验证是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p>5.安装脚本gist地址(执行脚本时记得回车继续，其中弹出确认安装提示选择是即可，脚本执行完毕后就已经成功安装Java8了，安装大约得等待一段时间，请耐心等待！):<br><a href=\"https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95\" target=\"_blank\" rel=\"external\">https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ubuntu-系统安装Java8-JDK\"><a href=\"#Ubuntu-系统安装Java8-JDK\" class=\"headerlink\" title=\"Ubuntu 系统安装Java8 JDK\"></a>Ubuntu 系统安装Java8 JDK</h2><p>1.添加ppa<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/java</div></pre></td></tr></table></figure></p>\n<p>2.更新系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div></pre></td></tr></table></figure></p>\n<p>3.开始安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install oracle-java8-installer -y</div></pre></td></tr></table></figure></p>\n<p>4.验证是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p>5.安装脚本gist地址(执行脚本时记得回车继续，其中弹出确认安装提示选择是即可，脚本执行完毕后就已经成功安装Java8了，安装大约得等待一段时间，请耐心等待！):<br><a href=\"https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95\" target=\"_blank\" rel=\"external\">https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95</a></p>\n"},{"title":"Mac通过brew安装redis","author":"strongant","date":"2017-07-26T13:41:00.000Z","_content":"## MacOS下通过brew安装redis\n\n### 安装redis:\n\n```\nbrew install redis\n```\n安装后的地址为:/usr/local/Cellar/redis/3.2.9\n\n### 链接redis的launch开机启动配置文件\n```\nln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\n```\n\n### 使用launchctl启动redis，每次开机启动\n```\nlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n```\n\n### 通过redis的配置文件进行启动\n```\nredis-server /usr/local/etc/redis.conf\n```\n### 停止开机启动redis\n\n```\nlaunchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n```\n\n### 安装后的redis默认配置文件地址：\n```\n/usr/local/etc/redis.conf\n```\n\n### 卸载redis\n```\nbrew uninstall redis\nrm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n```\n\n### 获取redis的安装信息\n```\nbrew info redis\n```\n\n### 测试redis是否启动\n```\nredis-cli ping\n```\n\n如果redis返回“PONG”，那么说明连接成功\n\n\n\n\n\n\n","source":"_posts/Mac通过brew安装redis.md","raw":"title: Mac通过brew安装redis\nauthor: strongant\ntags:\n  - mac\n  - redis\n  - brew\ncategories: []\ndate: 2017-07-26 21:41:00\n---\n## MacOS下通过brew安装redis\n\n### 安装redis:\n\n```\nbrew install redis\n```\n安装后的地址为:/usr/local/Cellar/redis/3.2.9\n\n### 链接redis的launch开机启动配置文件\n```\nln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\n```\n\n### 使用launchctl启动redis，每次开机启动\n```\nlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n```\n\n### 通过redis的配置文件进行启动\n```\nredis-server /usr/local/etc/redis.conf\n```\n### 停止开机启动redis\n\n```\nlaunchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n```\n\n### 安装后的redis默认配置文件地址：\n```\n/usr/local/etc/redis.conf\n```\n\n### 卸载redis\n```\nbrew uninstall redis\nrm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n```\n\n### 获取redis的安装信息\n```\nbrew info redis\n```\n\n### 测试redis是否启动\n```\nredis-cli ping\n```\n\n如果redis返回“PONG”，那么说明连接成功\n\n\n\n\n\n\n","slug":"Mac通过brew安装redis","published":1,"updated":"2017-07-26T13:42:06.000Z","_id":"cj5l26fq8000ea0o7tbwhduhs","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"MacOS下通过brew安装redis\"><a href=\"#MacOS下通过brew安装redis\" class=\"headerlink\" title=\"MacOS下通过brew安装redis\"></a>MacOS下通过brew安装redis</h2><h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis:\"></a>安装redis:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install redis</div></pre></td></tr></table></figure>\n<p>安装后的地址为:/usr/local/Cellar/redis/3.2.9</p>\n<h3 id=\"链接redis的launch开机启动配置文件\"><a href=\"#链接redis的launch开机启动配置文件\" class=\"headerlink\" title=\"链接redis的launch开机启动配置文件\"></a>链接redis的launch开机启动配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents</div></pre></td></tr></table></figure>\n<h3 id=\"使用launchctl启动redis，每次开机启动\"><a href=\"#使用launchctl启动redis，每次开机启动\" class=\"headerlink\" title=\"使用launchctl启动redis，每次开机启动\"></a>使用launchctl启动redis，每次开机启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>\n<h3 id=\"通过redis的配置文件进行启动\"><a href=\"#通过redis的配置文件进行启动\" class=\"headerlink\" title=\"通过redis的配置文件进行启动\"></a>通过redis的配置文件进行启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-server /usr/local/etc/redis.conf</div></pre></td></tr></table></figure>\n<h3 id=\"停止开机启动redis\"><a href=\"#停止开机启动redis\" class=\"headerlink\" title=\"停止开机启动redis\"></a>停止开机启动redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>\n<h3 id=\"安装后的redis默认配置文件地址：\"><a href=\"#安装后的redis默认配置文件地址：\" class=\"headerlink\" title=\"安装后的redis默认配置文件地址：\"></a>安装后的redis默认配置文件地址：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/etc/redis.conf</div></pre></td></tr></table></figure>\n<h3 id=\"卸载redis\"><a href=\"#卸载redis\" class=\"headerlink\" title=\"卸载redis\"></a>卸载redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew uninstall redis</div><div class=\"line\">rm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>\n<h3 id=\"获取redis的安装信息\"><a href=\"#获取redis的安装信息\" class=\"headerlink\" title=\"获取redis的安装信息\"></a>获取redis的安装信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew info redis</div></pre></td></tr></table></figure>\n<h3 id=\"测试redis是否启动\"><a href=\"#测试redis是否启动\" class=\"headerlink\" title=\"测试redis是否启动\"></a>测试redis是否启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-cli ping</div></pre></td></tr></table></figure>\n<p>如果redis返回“PONG”，那么说明连接成功</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MacOS下通过brew安装redis\"><a href=\"#MacOS下通过brew安装redis\" class=\"headerlink\" title=\"MacOS下通过brew安装redis\"></a>MacOS下通过brew安装redis</h2><h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis:\"></a>安装redis:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install redis</div></pre></td></tr></table></figure>\n<p>安装后的地址为:/usr/local/Cellar/redis/3.2.9</p>\n<h3 id=\"链接redis的launch开机启动配置文件\"><a href=\"#链接redis的launch开机启动配置文件\" class=\"headerlink\" title=\"链接redis的launch开机启动配置文件\"></a>链接redis的launch开机启动配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents</div></pre></td></tr></table></figure>\n<h3 id=\"使用launchctl启动redis，每次开机启动\"><a href=\"#使用launchctl启动redis，每次开机启动\" class=\"headerlink\" title=\"使用launchctl启动redis，每次开机启动\"></a>使用launchctl启动redis，每次开机启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>\n<h3 id=\"通过redis的配置文件进行启动\"><a href=\"#通过redis的配置文件进行启动\" class=\"headerlink\" title=\"通过redis的配置文件进行启动\"></a>通过redis的配置文件进行启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-server /usr/local/etc/redis.conf</div></pre></td></tr></table></figure>\n<h3 id=\"停止开机启动redis\"><a href=\"#停止开机启动redis\" class=\"headerlink\" title=\"停止开机启动redis\"></a>停止开机启动redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>\n<h3 id=\"安装后的redis默认配置文件地址：\"><a href=\"#安装后的redis默认配置文件地址：\" class=\"headerlink\" title=\"安装后的redis默认配置文件地址：\"></a>安装后的redis默认配置文件地址：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/etc/redis.conf</div></pre></td></tr></table></figure>\n<h3 id=\"卸载redis\"><a href=\"#卸载redis\" class=\"headerlink\" title=\"卸载redis\"></a>卸载redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew uninstall redis</div><div class=\"line\">rm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>\n<h3 id=\"获取redis的安装信息\"><a href=\"#获取redis的安装信息\" class=\"headerlink\" title=\"获取redis的安装信息\"></a>获取redis的安装信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew info redis</div></pre></td></tr></table></figure>\n<h3 id=\"测试redis是否启动\"><a href=\"#测试redis是否启动\" class=\"headerlink\" title=\"测试redis是否启动\"></a>测试redis是否启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-cli ping</div></pre></td></tr></table></figure>\n<p>如果redis返回“PONG”，那么说明连接成功</p>\n"},{"title":"Grails中一个日期差引起的思考","author":"strongant","date":"2017-08-02T14:02:00.000Z","_content":"### 需求如下\n\n** 对某表中的数据进行查询限制，当根据某个条件进行查询表记录时，如果该记录的查询时间与当前服务器时间相差大于一周，则允许查询操作，否则不允许重复查询操作。 **\n\n#### 编码\n\n根据当前需求进行编码，代码如下：\n```\nclass ExampleController {\n    def test() {\n        ...\n        def obj = XXX.findByName('xxx')\n        def limitDays = 7\n        if(obj && daysBetween(obj.queryTime,new Date())<=7){\n                            render([code: 10101, msg: \"查询失败，7天内不允许重复查询\", data: []] as grails.converters.JSON)\n                            return\n \n        }\n        ...\n    }\n    //TODO: 将此处判断移动至service或者util类\n    static def daysBetween(def startDate, def endDate) {\n        use(groovy.time.TimeCategory) {\n            def duration = endDate - startDate\n            return duration.days\n        }\n    }\n}\n```\n\n出现bug:\n**本地测试程序可以正常执行，但是发现在生产环境下并没有正常执行**\n\n错误解决：\n**以为是groovy.time.TimeCategory原生类有bug，将比较日期间隔天数的方法修改为如下:**\n\n```\n//TODO: 将此处判断移动至service或者util类\nstatic boolean keep7Days(endDate){\n     return (System.currentTimeMillis()-endDate.getTime())<3600*1000*24*7\n}\n```\n\n修改结果：\n问题依然存在。\n\n进行分析：\n\n** 当我们从某张表中根据某个条件查询一条记录，如果该条件对一个多条重复记录，那数据库将按照表中的记录插入顺序返回最初插入的一条记录。因此，当根据某条件进行匹配查询时，应该按照id降序排列后取得第一条即可。 **\n\n解决办法：\n```\n...\ndef obj = XXX.find(\"from XXX as b where b.xxx=:xxx order by b.id desc\",[xxx:xxx])\n...\n\n```\n\n通过以上方式，我们便可以得到最后插入的记录，此时再使用时间差进行判断就不会出现匹配不正确问题。\n\n#### 总结\n\n当项目中遇到bug时应该找到问题的根源再进行解决。在测试的过程中数据应该保持和生产环境数据一致！\n\n#### 彩蛋\n\n推荐两个不错的播客平台：\n\n [内核恐慌](https://ipn.li/kernelpanic/)\n [比特新声](http://banlan.show/bitvoice)","source":"_posts/Grails中一个日期差引起的思考.md","raw":"title: Grails中一个日期差引起的思考\nauthor: strongant\ntags:\n  - groovy\n  - grails\n  - gorm\ncategories: []\ndate: 2017-08-02 22:02:00\n---\n### 需求如下\n\n** 对某表中的数据进行查询限制，当根据某个条件进行查询表记录时，如果该记录的查询时间与当前服务器时间相差大于一周，则允许查询操作，否则不允许重复查询操作。 **\n\n#### 编码\n\n根据当前需求进行编码，代码如下：\n```\nclass ExampleController {\n    def test() {\n        ...\n        def obj = XXX.findByName('xxx')\n        def limitDays = 7\n        if(obj && daysBetween(obj.queryTime,new Date())<=7){\n                            render([code: 10101, msg: \"查询失败，7天内不允许重复查询\", data: []] as grails.converters.JSON)\n                            return\n \n        }\n        ...\n    }\n    //TODO: 将此处判断移动至service或者util类\n    static def daysBetween(def startDate, def endDate) {\n        use(groovy.time.TimeCategory) {\n            def duration = endDate - startDate\n            return duration.days\n        }\n    }\n}\n```\n\n出现bug:\n**本地测试程序可以正常执行，但是发现在生产环境下并没有正常执行**\n\n错误解决：\n**以为是groovy.time.TimeCategory原生类有bug，将比较日期间隔天数的方法修改为如下:**\n\n```\n//TODO: 将此处判断移动至service或者util类\nstatic boolean keep7Days(endDate){\n     return (System.currentTimeMillis()-endDate.getTime())<3600*1000*24*7\n}\n```\n\n修改结果：\n问题依然存在。\n\n进行分析：\n\n** 当我们从某张表中根据某个条件查询一条记录，如果该条件对一个多条重复记录，那数据库将按照表中的记录插入顺序返回最初插入的一条记录。因此，当根据某条件进行匹配查询时，应该按照id降序排列后取得第一条即可。 **\n\n解决办法：\n```\n...\ndef obj = XXX.find(\"from XXX as b where b.xxx=:xxx order by b.id desc\",[xxx:xxx])\n...\n\n```\n\n通过以上方式，我们便可以得到最后插入的记录，此时再使用时间差进行判断就不会出现匹配不正确问题。\n\n#### 总结\n\n当项目中遇到bug时应该找到问题的根源再进行解决。在测试的过程中数据应该保持和生产环境数据一致！\n\n#### 彩蛋\n\n推荐两个不错的播客平台：\n\n [内核恐慌](https://ipn.li/kernelpanic/)\n [比特新声](http://banlan.show/bitvoice)","slug":"Grails中一个日期差引起的思考","published":1,"updated":"2017-08-02T14:33:41.000Z","_id":"cj5v30ytk0000dvo75090n0qy","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"需求如下\"><a href=\"#需求如下\" class=\"headerlink\" title=\"需求如下\"></a>需求如下</h3><p><strong> 对某表中的数据进行查询限制，当根据某个条件进行查询表记录时，如果该记录的查询时间与当前服务器时间相差大于一周，则允许查询操作，否则不允许重复查询操作。 </strong></p>\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><p>根据当前需求进行编码，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ExampleController &#123;</div><div class=\"line\">    def test() &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        def obj = XXX.findByName(&apos;xxx&apos;)</div><div class=\"line\">        def limitDays = 7</div><div class=\"line\">        if(obj &amp;&amp; daysBetween(obj.queryTime,new Date())&lt;=7)&#123;</div><div class=\"line\">                            render([code: 10101, msg: &quot;查询失败，7天内不允许重复查询&quot;, data: []] as grails.converters.JSON)</div><div class=\"line\">                            return</div><div class=\"line\"> </div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    //TODO: 将此处判断移动至service或者util类</div><div class=\"line\">    static def daysBetween(def startDate, def endDate) &#123;</div><div class=\"line\">        use(groovy.time.TimeCategory) &#123;</div><div class=\"line\">            def duration = endDate - startDate</div><div class=\"line\">            return duration.days</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>出现bug:<br><strong>本地测试程序可以正常执行，但是发现在生产环境下并没有正常执行</strong></p>\n<p>错误解决：<br><strong>以为是groovy.time.TimeCategory原生类有bug，将比较日期间隔天数的方法修改为如下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//TODO: 将此处判断移动至service或者util类</div><div class=\"line\">static boolean keep7Days(endDate)&#123;</div><div class=\"line\">     return (System.currentTimeMillis()-endDate.getTime())&lt;3600*1000*24*7</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改结果：<br>问题依然存在。</p>\n<p>进行分析：</p>\n<p><strong> 当我们从某张表中根据某个条件查询一条记录，如果该条件对一个多条重复记录，那数据库将按照表中的记录插入顺序返回最初插入的一条记录。因此，当根据某条件进行匹配查询时，应该按照id降序排列后取得第一条即可。 </strong></p>\n<p>解决办法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">def obj = XXX.find(&quot;from XXX as b where b.xxx=:xxx order by b.id desc&quot;,[xxx:xxx])</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>通过以上方式，我们便可以得到最后插入的记录，此时再使用时间差进行判断就不会出现匹配不正确问题。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当项目中遇到bug时应该找到问题的根源再进行解决。在测试的过程中数据应该保持和生产环境数据一致！</p>\n<h4 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h4><p>推荐两个不错的播客平台：</p>\n<p> <a href=\"https://ipn.li/kernelpanic/\" target=\"_blank\" rel=\"external\">内核恐慌</a><br> <a href=\"http://banlan.show/bitvoice\" target=\"_blank\" rel=\"external\">比特新声</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"需求如下\"><a href=\"#需求如下\" class=\"headerlink\" title=\"需求如下\"></a>需求如下</h3><p><strong> 对某表中的数据进行查询限制，当根据某个条件进行查询表记录时，如果该记录的查询时间与当前服务器时间相差大于一周，则允许查询操作，否则不允许重复查询操作。 </strong></p>\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><p>根据当前需求进行编码，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ExampleController &#123;</div><div class=\"line\">    def test() &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        def obj = XXX.findByName(&apos;xxx&apos;)</div><div class=\"line\">        def limitDays = 7</div><div class=\"line\">        if(obj &amp;&amp; daysBetween(obj.queryTime,new Date())&lt;=7)&#123;</div><div class=\"line\">                            render([code: 10101, msg: &quot;查询失败，7天内不允许重复查询&quot;, data: []] as grails.converters.JSON)</div><div class=\"line\">                            return</div><div class=\"line\"> </div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    //TODO: 将此处判断移动至service或者util类</div><div class=\"line\">    static def daysBetween(def startDate, def endDate) &#123;</div><div class=\"line\">        use(groovy.time.TimeCategory) &#123;</div><div class=\"line\">            def duration = endDate - startDate</div><div class=\"line\">            return duration.days</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>出现bug:<br><strong>本地测试程序可以正常执行，但是发现在生产环境下并没有正常执行</strong></p>\n<p>错误解决：<br><strong>以为是groovy.time.TimeCategory原生类有bug，将比较日期间隔天数的方法修改为如下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//TODO: 将此处判断移动至service或者util类</div><div class=\"line\">static boolean keep7Days(endDate)&#123;</div><div class=\"line\">     return (System.currentTimeMillis()-endDate.getTime())&lt;3600*1000*24*7</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改结果：<br>问题依然存在。</p>\n<p>进行分析：</p>\n<p><strong> 当我们从某张表中根据某个条件查询一条记录，如果该条件对一个多条重复记录，那数据库将按照表中的记录插入顺序返回最初插入的一条记录。因此，当根据某条件进行匹配查询时，应该按照id降序排列后取得第一条即可。 </strong></p>\n<p>解决办法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">def obj = XXX.find(&quot;from XXX as b where b.xxx=:xxx order by b.id desc&quot;,[xxx:xxx])</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>通过以上方式，我们便可以得到最后插入的记录，此时再使用时间差进行判断就不会出现匹配不正确问题。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当项目中遇到bug时应该找到问题的根源再进行解决。在测试的过程中数据应该保持和生产环境数据一致！</p>\n<h4 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h4><p>推荐两个不错的播客平台：</p>\n<p> <a href=\"https://ipn.li/kernelpanic/\" target=\"_blank\" rel=\"external\">内核恐慌</a><br> <a href=\"http://banlan.show/bitvoice\" target=\"_blank\" rel=\"external\">比特新声</a></p>\n"},{"title":"上班路上的琐事","author":"strongant","date":"2017-08-05T06:59:00.000Z","_content":"### 事件起因\n\n  骑着电动车上班也有4个月了，总体感觉还是很不错的！由之前坐地铁上班花费1个半小时减少到现在的半个小时，还是很不错的一笔投资！其实后悔电瓶车买的有点迟了，如果早点买的话起码可以在出行方面带来很多方便，虽然现在有很多的共享单车可以骑，但是对于上海这么大的地方和上班距离遥远的情况，对于骑自行车来上班肯定是来不及的，速度也跟不上，根本无法满足自己的需求！可就在昨天下午2017年8月5号18点20分左右，当我插上电动车钥匙，死活就是启动不了电瓶车，而且电瓶车很明显没有一丁点儿电了，大灯不亮，喇叭不响，心里一下难过了，到底什么鬼导致这个问题的发生呢？然后想了想，我靠，中午的时候貌似下很大的雨，不会是雨漏到电瓶或者控制器里面，导致短路了吧？这个只是当时的猜测，后面接着开始用百度进行搜索一下，看网上有没有类似的网友遇到此问题，网上扫了一圈，基本上都说是可能是电瓶进水了，把电瓶晾干就可以骑了，其实当时想给卖车的师傅打电话的，又相信了网上的答案，于是便将车放到车棚里面坐地铁回家了，晚上可是要看《战狼2》的，不然时间来不及了，于是便放下电动车，匆忙往电影院赶！\n  \n### 事件经过\n  晚上看完电影，天气湿热湿热，难受至极，晚上浑浑噩噩的睡了一晚上。大清早9点多就起来了，起来便开始准备去公司看看电瓶车是不是像网上说的那样，等到电瓶晾干了，就可以骑了！于是乎开始骑单车、等公交、坐公交、等地铁、坐地铁，从出发到到达公司，大概花费了我2个小时，在这里我不得不吐槽交通问题，其实住的地方离公司只有20公里，有一次我起迟了害怕迟到，就打了个车到公司，花了40块钱。但是花费时间让我很惊讶，只用了10分钟，我就纳闷了，为什么这么快呢？原来是因为坐地铁比较绕，而且也没有直达的公交，如果坐公交的话也是特别绕，所以就浪费了不应该浪费的2个小时时间。这一点可能是因为个人住的地方偏远原因吧，不过我想很多人应该也有类似的愤怒，明明不是很远，却要绕很多路花很多时间才能到目的地。抱怨没用，只能自己想办法解决！到了公司之后去找到电瓶车，幸亏公司的安保措施做得不错，车子没有被偷，谢天谢地！当我插上钥匙，和昨天下午一个样，还是没有电，顿时想：糟糕，肯定是电瓶进水太严重，导致车子彻底没电了，这时候我想打电话找个修车师傅帮我看看，可卖车的地方离公司太远了，就想着要不要找个距离我比较近的修车师傅过来看看，又顾虑这是新车，如果让别人拆开修，人家不给我保修了怎么办，买下车骑了也没有多长时间，不划算！还是打电话问一下原卖车的师傅，我把情况给人家说了一下：昨天中午下了会大雨，车子没有用雨衣盖住，昨天下班后钥匙插上之后，启动不了，纯粹没电！然后又经验的师傅说了下：你检查一下座子下面那个开关是不是把电瓶的电源关闭了。于是我便按照他说的，打开后座，把开关切换了一些，然后用钥匙插上，发现奇迹产生了，电动车一切正常，心里窃喜，不用修了，感谢有经验的老司机！\n  \n### 又出波折\n  由于又可以正常骑行了，不用挤地铁，一切恢复正常，心里比较窃喜，骑行的过程中一不小心就撞到了马路边的一个栏杆桩上面，这一撞直接把电瓶车的单撑撞断了，于是骑到卖车的地方花了40块钱焊接了一下，唉，这半天的时间又浪费过去了！无奈！\n  \n### 事件总结\n  在平时用车的时候，应该特别小心，注意安全！最后分享一个CCTV7的对电动车电池修复技术的介绍视频，本人觉得讲解的很好，很细致！<http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c>","source":"_posts/生活感慨.md","raw":"title: 上班路上的琐事\nauthor: strongant\ntags:\n  - ''\n  - 随笔\ncategories: []\ndate: 2017-08-05 14:59:00\n---\n### 事件起因\n\n  骑着电动车上班也有4个月了，总体感觉还是很不错的！由之前坐地铁上班花费1个半小时减少到现在的半个小时，还是很不错的一笔投资！其实后悔电瓶车买的有点迟了，如果早点买的话起码可以在出行方面带来很多方便，虽然现在有很多的共享单车可以骑，但是对于上海这么大的地方和上班距离遥远的情况，对于骑自行车来上班肯定是来不及的，速度也跟不上，根本无法满足自己的需求！可就在昨天下午2017年8月5号18点20分左右，当我插上电动车钥匙，死活就是启动不了电瓶车，而且电瓶车很明显没有一丁点儿电了，大灯不亮，喇叭不响，心里一下难过了，到底什么鬼导致这个问题的发生呢？然后想了想，我靠，中午的时候貌似下很大的雨，不会是雨漏到电瓶或者控制器里面，导致短路了吧？这个只是当时的猜测，后面接着开始用百度进行搜索一下，看网上有没有类似的网友遇到此问题，网上扫了一圈，基本上都说是可能是电瓶进水了，把电瓶晾干就可以骑了，其实当时想给卖车的师傅打电话的，又相信了网上的答案，于是便将车放到车棚里面坐地铁回家了，晚上可是要看《战狼2》的，不然时间来不及了，于是便放下电动车，匆忙往电影院赶！\n  \n### 事件经过\n  晚上看完电影，天气湿热湿热，难受至极，晚上浑浑噩噩的睡了一晚上。大清早9点多就起来了，起来便开始准备去公司看看电瓶车是不是像网上说的那样，等到电瓶晾干了，就可以骑了！于是乎开始骑单车、等公交、坐公交、等地铁、坐地铁，从出发到到达公司，大概花费了我2个小时，在这里我不得不吐槽交通问题，其实住的地方离公司只有20公里，有一次我起迟了害怕迟到，就打了个车到公司，花了40块钱。但是花费时间让我很惊讶，只用了10分钟，我就纳闷了，为什么这么快呢？原来是因为坐地铁比较绕，而且也没有直达的公交，如果坐公交的话也是特别绕，所以就浪费了不应该浪费的2个小时时间。这一点可能是因为个人住的地方偏远原因吧，不过我想很多人应该也有类似的愤怒，明明不是很远，却要绕很多路花很多时间才能到目的地。抱怨没用，只能自己想办法解决！到了公司之后去找到电瓶车，幸亏公司的安保措施做得不错，车子没有被偷，谢天谢地！当我插上钥匙，和昨天下午一个样，还是没有电，顿时想：糟糕，肯定是电瓶进水太严重，导致车子彻底没电了，这时候我想打电话找个修车师傅帮我看看，可卖车的地方离公司太远了，就想着要不要找个距离我比较近的修车师傅过来看看，又顾虑这是新车，如果让别人拆开修，人家不给我保修了怎么办，买下车骑了也没有多长时间，不划算！还是打电话问一下原卖车的师傅，我把情况给人家说了一下：昨天中午下了会大雨，车子没有用雨衣盖住，昨天下班后钥匙插上之后，启动不了，纯粹没电！然后又经验的师傅说了下：你检查一下座子下面那个开关是不是把电瓶的电源关闭了。于是我便按照他说的，打开后座，把开关切换了一些，然后用钥匙插上，发现奇迹产生了，电动车一切正常，心里窃喜，不用修了，感谢有经验的老司机！\n  \n### 又出波折\n  由于又可以正常骑行了，不用挤地铁，一切恢复正常，心里比较窃喜，骑行的过程中一不小心就撞到了马路边的一个栏杆桩上面，这一撞直接把电瓶车的单撑撞断了，于是骑到卖车的地方花了40块钱焊接了一下，唉，这半天的时间又浪费过去了！无奈！\n  \n### 事件总结\n  在平时用车的时候，应该特别小心，注意安全！最后分享一个CCTV7的对电动车电池修复技术的介绍视频，本人觉得讲解的很好，很细致！<http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c>","slug":"生活感慨","published":1,"updated":"2017-08-05T08:31:46.000Z","_id":"cj5yy8m5s00000so7tu53afso","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"事件起因\"><a href=\"#事件起因\" class=\"headerlink\" title=\"事件起因\"></a>事件起因</h3><p>  骑着电动车上班也有4个月了，总体感觉还是很不错的！由之前坐地铁上班花费1个半小时减少到现在的半个小时，还是很不错的一笔投资！其实后悔电瓶车买的有点迟了，如果早点买的话起码可以在出行方面带来很多方便，虽然现在有很多的共享单车可以骑，但是对于上海这么大的地方和上班距离遥远的情况，对于骑自行车来上班肯定是来不及的，速度也跟不上，根本无法满足自己的需求！可就在昨天下午2017年8月5号18点20分左右，当我插上电动车钥匙，死活就是启动不了电瓶车，而且电瓶车很明显没有一丁点儿电了，大灯不亮，喇叭不响，心里一下难过了，到底什么鬼导致这个问题的发生呢？然后想了想，我靠，中午的时候貌似下很大的雨，不会是雨漏到电瓶或者控制器里面，导致短路了吧？这个只是当时的猜测，后面接着开始用百度进行搜索一下，看网上有没有类似的网友遇到此问题，网上扫了一圈，基本上都说是可能是电瓶进水了，把电瓶晾干就可以骑了，其实当时想给卖车的师傅打电话的，又相信了网上的答案，于是便将车放到车棚里面坐地铁回家了，晚上可是要看《战狼2》的，不然时间来不及了，于是便放下电动车，匆忙往电影院赶！</p>\n<h3 id=\"事件经过\"><a href=\"#事件经过\" class=\"headerlink\" title=\"事件经过\"></a>事件经过</h3><p>  晚上看完电影，天气湿热湿热，难受至极，晚上浑浑噩噩的睡了一晚上。大清早9点多就起来了，起来便开始准备去公司看看电瓶车是不是像网上说的那样，等到电瓶晾干了，就可以骑了！于是乎开始骑单车、等公交、坐公交、等地铁、坐地铁，从出发到到达公司，大概花费了我2个小时，在这里我不得不吐槽交通问题，其实住的地方离公司只有20公里，有一次我起迟了害怕迟到，就打了个车到公司，花了40块钱。但是花费时间让我很惊讶，只用了10分钟，我就纳闷了，为什么这么快呢？原来是因为坐地铁比较绕，而且也没有直达的公交，如果坐公交的话也是特别绕，所以就浪费了不应该浪费的2个小时时间。这一点可能是因为个人住的地方偏远原因吧，不过我想很多人应该也有类似的愤怒，明明不是很远，却要绕很多路花很多时间才能到目的地。抱怨没用，只能自己想办法解决！到了公司之后去找到电瓶车，幸亏公司的安保措施做得不错，车子没有被偷，谢天谢地！当我插上钥匙，和昨天下午一个样，还是没有电，顿时想：糟糕，肯定是电瓶进水太严重，导致车子彻底没电了，这时候我想打电话找个修车师傅帮我看看，可卖车的地方离公司太远了，就想着要不要找个距离我比较近的修车师傅过来看看，又顾虑这是新车，如果让别人拆开修，人家不给我保修了怎么办，买下车骑了也没有多长时间，不划算！还是打电话问一下原卖车的师傅，我把情况给人家说了一下：昨天中午下了会大雨，车子没有用雨衣盖住，昨天下班后钥匙插上之后，启动不了，纯粹没电！然后又经验的师傅说了下：你检查一下座子下面那个开关是不是把电瓶的电源关闭了。于是我便按照他说的，打开后座，把开关切换了一些，然后用钥匙插上，发现奇迹产生了，电动车一切正常，心里窃喜，不用修了，感谢有经验的老司机！</p>\n<h3 id=\"又出波折\"><a href=\"#又出波折\" class=\"headerlink\" title=\"又出波折\"></a>又出波折</h3><p>  由于又可以正常骑行了，不用挤地铁，一切恢复正常，心里比较窃喜，骑行的过程中一不小心就撞到了马路边的一个栏杆桩上面，这一撞直接把电瓶车的单撑撞断了，于是骑到卖车的地方花了40块钱焊接了一下，唉，这半天的时间又浪费过去了！无奈！</p>\n<h3 id=\"事件总结\"><a href=\"#事件总结\" class=\"headerlink\" title=\"事件总结\"></a>事件总结</h3><p>  在平时用车的时候，应该特别小心，注意安全！最后分享一个CCTV7的对电动车电池修复技术的介绍视频，本人觉得讲解的很好，很细致！<a href=\"http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c\" target=\"_blank\" rel=\"external\">http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事件起因\"><a href=\"#事件起因\" class=\"headerlink\" title=\"事件起因\"></a>事件起因</h3><p>  骑着电动车上班也有4个月了，总体感觉还是很不错的！由之前坐地铁上班花费1个半小时减少到现在的半个小时，还是很不错的一笔投资！其实后悔电瓶车买的有点迟了，如果早点买的话起码可以在出行方面带来很多方便，虽然现在有很多的共享单车可以骑，但是对于上海这么大的地方和上班距离遥远的情况，对于骑自行车来上班肯定是来不及的，速度也跟不上，根本无法满足自己的需求！可就在昨天下午2017年8月5号18点20分左右，当我插上电动车钥匙，死活就是启动不了电瓶车，而且电瓶车很明显没有一丁点儿电了，大灯不亮，喇叭不响，心里一下难过了，到底什么鬼导致这个问题的发生呢？然后想了想，我靠，中午的时候貌似下很大的雨，不会是雨漏到电瓶或者控制器里面，导致短路了吧？这个只是当时的猜测，后面接着开始用百度进行搜索一下，看网上有没有类似的网友遇到此问题，网上扫了一圈，基本上都说是可能是电瓶进水了，把电瓶晾干就可以骑了，其实当时想给卖车的师傅打电话的，又相信了网上的答案，于是便将车放到车棚里面坐地铁回家了，晚上可是要看《战狼2》的，不然时间来不及了，于是便放下电动车，匆忙往电影院赶！</p>\n<h3 id=\"事件经过\"><a href=\"#事件经过\" class=\"headerlink\" title=\"事件经过\"></a>事件经过</h3><p>  晚上看完电影，天气湿热湿热，难受至极，晚上浑浑噩噩的睡了一晚上。大清早9点多就起来了，起来便开始准备去公司看看电瓶车是不是像网上说的那样，等到电瓶晾干了，就可以骑了！于是乎开始骑单车、等公交、坐公交、等地铁、坐地铁，从出发到到达公司，大概花费了我2个小时，在这里我不得不吐槽交通问题，其实住的地方离公司只有20公里，有一次我起迟了害怕迟到，就打了个车到公司，花了40块钱。但是花费时间让我很惊讶，只用了10分钟，我就纳闷了，为什么这么快呢？原来是因为坐地铁比较绕，而且也没有直达的公交，如果坐公交的话也是特别绕，所以就浪费了不应该浪费的2个小时时间。这一点可能是因为个人住的地方偏远原因吧，不过我想很多人应该也有类似的愤怒，明明不是很远，却要绕很多路花很多时间才能到目的地。抱怨没用，只能自己想办法解决！到了公司之后去找到电瓶车，幸亏公司的安保措施做得不错，车子没有被偷，谢天谢地！当我插上钥匙，和昨天下午一个样，还是没有电，顿时想：糟糕，肯定是电瓶进水太严重，导致车子彻底没电了，这时候我想打电话找个修车师傅帮我看看，可卖车的地方离公司太远了，就想着要不要找个距离我比较近的修车师傅过来看看，又顾虑这是新车，如果让别人拆开修，人家不给我保修了怎么办，买下车骑了也没有多长时间，不划算！还是打电话问一下原卖车的师傅，我把情况给人家说了一下：昨天中午下了会大雨，车子没有用雨衣盖住，昨天下班后钥匙插上之后，启动不了，纯粹没电！然后又经验的师傅说了下：你检查一下座子下面那个开关是不是把电瓶的电源关闭了。于是我便按照他说的，打开后座，把开关切换了一些，然后用钥匙插上，发现奇迹产生了，电动车一切正常，心里窃喜，不用修了，感谢有经验的老司机！</p>\n<h3 id=\"又出波折\"><a href=\"#又出波折\" class=\"headerlink\" title=\"又出波折\"></a>又出波折</h3><p>  由于又可以正常骑行了，不用挤地铁，一切恢复正常，心里比较窃喜，骑行的过程中一不小心就撞到了马路边的一个栏杆桩上面，这一撞直接把电瓶车的单撑撞断了，于是骑到卖车的地方花了40块钱焊接了一下，唉，这半天的时间又浪费过去了！无奈！</p>\n<h3 id=\"事件总结\"><a href=\"#事件总结\" class=\"headerlink\" title=\"事件总结\"></a>事件总结</h3><p>  在平时用车的时候，应该特别小心，注意安全！最后分享一个CCTV7的对电动车电池修复技术的介绍视频，本人觉得讲解的很好，很细致！<a href=\"http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c\" target=\"_blank\" rel=\"external\">http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5fd43b70005ubo7958i63xj","category_id":"cj5fd43bb0009ubo7jvd3xu7s","_id":"cj5fd43bl000jubo72xur1mr4"},{"post_id":"cj5fd43bi000eubo7n3ys2zgb","category_id":"cj5fd43bl000iubo73dy869eg","_id":"cj5fd43bp000pubo73u6bt5sn"},{"post_id":"cj5fd43bm000kubo7wqsyvgaz","category_id":"cj5fd43bp000nubo7whbpo7zn","_id":"cj5fd43br000subo7o7bx4qut"}],"PostTag":[{"post_id":"cj5fd43ar0000ubo711si9e1j","tag_id":"cj5fd43b00002ubo777008jw8","_id":"cj5fd43b90007ubo7pkyyai30"},{"post_id":"cj5fd43aw0001ubo7be7np46t","tag_id":"cj5fd43b80006ubo77okdsuie","_id":"cj5fd43bh000dubo735813un3"},{"post_id":"cj5fd43b30003ubo7w7bioir9","tag_id":"cj5fd43bf000bubo7zpa0zjl1","_id":"cj5fd43bk000hubo7chzzev19"},{"post_id":"cj5fd43b40004ubo7jn5al8vn","tag_id":"cj5fd43bj000fubo7hrmaeztp","_id":"cj5fd43bp000mubo7jom4hqzo"},{"post_id":"cj5fd43b70005ubo7958i63xj","tag_id":"cj5fd43bo000lubo7bmswm18o","_id":"cj5fd43bq000qubo7ad8qywfk"},{"post_id":"cj5fd43bc000aubo7grojhldt","tag_id":"cj5fd43bp000oubo7kzjrxhdk","_id":"cj5fd43br000tubo740ob5yj7"},{"post_id":"cj5fd43bi000eubo7n3ys2zgb","tag_id":"cj5fd43bq000rubo777kb5n42","_id":"cj5fd43bt000wubo7yynvdsgs"},{"post_id":"cj5fd43bi000eubo7n3ys2zgb","tag_id":"cj5fd43bs000uubo7an9911fc","_id":"cj5fd43bt000xubo77ixr3j9w"},{"post_id":"cj5fd43bj000gubo78dhxpxze","tag_id":"cj5fd43bt000vubo7spkhs4cp","_id":"cj5fd43bt000zubo7w2ne804b"},{"post_id":"cj5fd43bm000kubo7wqsyvgaz","tag_id":"cj5fd43bt000yubo71is43c9r","_id":"cj5fd43bu0010ubo7rwkjy2ry"},{"post_id":"cj5kzbg6s0000a0o7t9ot77mi","tag_id":"cj5kzf9z60001a0o7xqq9ueqk","_id":"cj5kzf9z80004a0o78lscd5gg"},{"post_id":"cj5kzbg6s0000a0o7t9ot77mi","tag_id":"cj5kzf9z70002a0o7n7me18tt","_id":"cj5kzf9z80005a0o7dhedivsi"},{"post_id":"cj5kzbg6s0000a0o7t9ot77mi","tag_id":"cj5kzf9z70003a0o70kbiv9hz","_id":"cj5kzf9z80006a0o7fpff5be1"},{"post_id":"cj5l1v93u0007a0o7ym2lyusr","tag_id":"cj5l23idm0008a0o7fq77xjru","_id":"cj5l23idv000ba0o7pk7h3qsl"},{"post_id":"cj5l1v93u0007a0o7ym2lyusr","tag_id":"cj5l23idu0009a0o7c815qu1u","_id":"cj5l23idv000ca0o7yqkcqzbn"},{"post_id":"cj5l1v93u0007a0o7ym2lyusr","tag_id":"cj5l23idu000aa0o7kbvo9lro","_id":"cj5l23idw000da0o79csi53p2"},{"post_id":"cj5l26fq8000ea0o7tbwhduhs","tag_id":"cj5l26ss6000fa0o7bfjj97fg","_id":"cj5l26ss7000ia0o7lbw7ipwg"},{"post_id":"cj5l26fq8000ea0o7tbwhduhs","tag_id":"cj5l26ss7000ga0o7a2vmolsf","_id":"cj5l26ss8000ja0o7r7aqji0t"},{"post_id":"cj5l26fq8000ea0o7tbwhduhs","tag_id":"cj5l26ss7000ha0o7wcpseujr","_id":"cj5l26ss8000ka0o7p6qn6mty"},{"post_id":"cj5v30ytk0000dvo75090n0qy","tag_id":"cj5v31ns10001dvo7ptkppu9e","_id":"cj5v31ns60004dvo7mvvt6awj"},{"post_id":"cj5v30ytk0000dvo75090n0qy","tag_id":"cj5v31ns50002dvo7b3c9baox","_id":"cj5v31ns60005dvo7pkxlkhr3"},{"post_id":"cj5v30ytk0000dvo75090n0qy","tag_id":"cj5v31ns50003dvo7yndo4z8p","_id":"cj5v31ns60006dvo78gfj2h1h"},{"post_id":"cj5yy8m5s00000so7tu53afso","tag_id":"cj5fd43b00002ubo777008jw8","_id":"cj5z1iujl0002nlo7wqalwyle"}],"Tag":[{"name":"随笔","_id":"cj5fd43b00002ubo777008jw8"},{"name":"SpringBoot","_id":"cj5fd43b80006ubo77okdsuie"},{"name":"IDEA,Mac快捷键","_id":"cj5fd43bf000bubo7zpa0zjl1"},{"name":"Java面试","_id":"cj5fd43bj000fubo7hrmaeztp"},{"name":"Tools","_id":"cj5fd43bo000lubo7bmswm18o"},{"name":"rxjs","_id":"cj5fd43bp000oubo7kzjrxhdk"},{"name":"SpringData","_id":"cj5fd43bq000rubo777kb5n42"},{"name":"Elasticsearch","_id":"cj5fd43bs000uubo7an9911fc"},{"name":"生活感悟","_id":"cj5fd43bt000vubo7spkhs4cp"},{"name":"DataStructureAndAlgorithm","_id":"cj5fd43bt000yubo71is43c9r"},{"name":"工具","_id":"cj5kzf9z60001a0o7xqq9ueqk"},{"name":"终端","_id":"cj5kzf9z70002a0o7n7me18tt"},{"name":"showterm","_id":"cj5kzf9z70003a0o70kbiv9hz"},{"name":"jdk","_id":"cj5l23idm0008a0o7fq77xjru"},{"name":"java8","_id":"cj5l23idu0009a0o7c815qu1u"},{"name":"sh","_id":"cj5l23idu000aa0o7kbvo9lro"},{"name":"mac","_id":"cj5l26ss6000fa0o7bfjj97fg"},{"name":"redis","_id":"cj5l26ss7000ga0o7a2vmolsf"},{"name":"brew","_id":"cj5l26ss7000ha0o7wcpseujr"},{"name":"groovy","_id":"cj5v31ns10001dvo7ptkppu9e"},{"name":"grails","_id":"cj5v31ns50002dvo7b3c9baox"},{"name":"gorm","_id":"cj5v31ns50003dvo7yndo4z8p"},{"name":"生活","_id":"cj5yya1s200010so77pqvdx81"}]}}