--- 

#- name: Annotating nodes (cloud-controller-manager)
#  shell: >
#    {{ bin_dir }}/kubectl annotate node {{ inventory_hostname }} node.beta.kubernetes.io/instance-id=$(cat /etc/qingcloud/instance-id)
#  register: import
#  failed_when: "import.stderr and 'already' not in import.stderr"

- name: cloud-controller-manager | Create cloud-controller-manager directory
  file:
    path: "{{ item }}"
    state: directory
  become: true
  with_items:
    - "{{ kubesphere_dir }}/cloud-controller-manager"


- name: cloud-controller-manager | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/cloud-controller-manager/{{ item.file }}"
  with_items:
    - { name: kube-cloud-controller-manager, file: kube-cloud-controller-manager.yaml, type: deploy }
    - { name: config, file: config.yaml, type: config }
    - { name: qingcloud, file: qingcloud.yaml, type: config }

- name: cloud-controller-manager | Creating cloud-controller-manager cm (1)
  shell: >
    {{ bin_dir }}/kubectl --namespace=kube-system create secret generic qcsecret
    --from-file=config.yaml={{ kubesphere_dir }}/cloud-controller-manager/config.yaml
  register: import 
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: cloud-controller-manager | Creating cloud-controller-manager cm (2)
  shell: >
    {{ bin_dir }}/kubectl --namespace=kube-system create configmap lbconfig
    --from-file=qingcloud.yaml={{ kubesphere_dir }}/cloud-controller-manager/qingcloud.yaml
  register: import 
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: cloud-controller-manager | Creating cloud-controller-manager 
  shell: >
    {{ bin_dir }}/kubectl -n kube-system apply -f {{ kubesphere_dir }}/cloud-controller-manager/kube-cloud-controller-manager.yaml
  register: import 
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"
