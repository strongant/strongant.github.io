######################### QingCloud Authentication #########################

# To install KubeSphere on QingCloud platform(public or private), please provide
# the api access key in following section, which belongs to the user account
# who setup this KubeSphere on QingCloud platform
# Skip this section in case of installing on any other non-QingCloud environment.

# QingCloud access key pair, which could be find at https://console.qingcloud.com/access_keys/.
# Ceate one if don't have it.
qingcloud_access_key_id: ACCESS_KEY_ID
qingcloud_secret_access_key: ACCESS_KEY_SECRET

# Zone where KubeSphere cluster resides on. Zone list can be found in
# https://docs.qingcloud.com/product/region/.
# For example,
# qingcloud_zone: pek3
qingcloud_zone: ZONE

# QingCloud API server endpoint. Don't change it for public QingCloud environment.
# Updating it with right data in case of installing KubeSphere in private QingCloud environment.
qingcloud_host: api.qingcloud.com
qingcloud_port: 443
qingcloud_protocol: https
qingcloud_uri: /iaas
qingcloud_connection_retries: 3
qingcloud_connection_timeout: 30


######################### QingCloud LoadBalancer Plugin #########################
# Highly recommend to enable LoadBalancer plugin in case of
# using KubeSphere on QingCloud.
# Check link below to find out more details.
# https://docs.kubesphere.io/v2.1/zh-CN/installation/qingcloud-lb
qingcloud_lb_enabled: false
# vxnet where Kubernetes nodes are located in
# For example
# qingcloud_vxnet_id: vxnet-d3sfx
qingcloud_vxnet_id: SHOULD_BE_REPLACED


######################### QINGCLOUD CSI Plugin #########################
# qingcloud-csi as storage type, which specifies KubeSphere to use QingCloud SDS as backend storage service.
# Note: disable other storage types in configuration file.
# MUST specify QingCloud API access key in QingCloud section.

# Change to enable to use qingcloud-csi
qingcloud_csi_enabled: false

# whether to set qingcloud-csi as default storage class in Kubernetes
qingcloud_csi_is_default_class: false

# The type of volume in QingCloud platform.
# 0 represents high performance volume
# 3 respresents super high performance volume.
# 1 or 2 represents high capacity volume depending on cluste's zone
# 5 represents enterprise distributed SAN (NeonSAN) volume
# 100 represents basic volume
# 200 represents SSD enterprise volume.
qingcloud_type: 2
qingcloud_maxSize: 5000
qingcloud_minSize: 100
qingcloud_stepSize: 50
qingcloud_fsType: ext4
# 1 means single replica, 2 means multiple replicas. Default 2.
qingcloud_disk_replica: 2
## Tags ID in QingCloud IaaS platform split with a comma.
#qingcloud_storageclass_tags:
qingcloud_allowVolumeExpansion: true
# The volumeBindingMode field controls when volume binding
# and dynamic provisioning should occur. (Immediate/WaitForFirstConsumer)
# Immediate: volume binding and dynamic provisioning occurs once the PersistentVolumeClaim is created.
# WaitForFirstConsumer: It will delay the binding and provisioning of a PersistentVolume until a Pod using the PersistentVolumeClaim is created.
qingcloud_volumeBindingMode: Immediate


######################### QINGCLOUD NEONSAN Plugin #########################
# QINGCLOUD NEONSAN
# change to true to use neonsan as backend storage service.
neonsan_csi_enabled: false
neonsan_csi_is_default_class: false
# csi-neonsan container option protocol: TCP or RDMA
neonsan_csi_protocol: TCP
# address of the NeonSAN server
neonsan_server_address: IP:PORT
# cluster_name of the NeonSAN server
neonsan_cluster_name: CLUSTER_NAME
# the name of the volume storage pool
neonsan_server_pool: kube
# NeonSAN image replica count
neonsan_server_replicas: 1
# set the increment of volumes size in GiB
neonsan_server_stepSize: 10
# the file system to use for the volume
neonsan_server_fsType: ext4
client_tcp_no_delay: 1
client_io_depth: 64
client_io_timeout: 30
conn_timeout: 8
open_volume_timeout: 180